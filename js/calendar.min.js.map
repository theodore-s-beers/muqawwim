{
  "version": 3,
  "sources": ["calendar.js"],
  "sourcesContent": ["/* global Option */\n\n/*\n            JavaScript functions for positional astronomy\n\n                  by John Walker -- September, MIM\n                      http://www.fourmilab.ch/\n\n                This program is in the public domain.\n*/\n\n// Frequently-used constants\n\nconst J2000 = 2451545.0 // Julian day of J2000 epoch\nconst JulianCentury = 36525.0 // Days in Julian century\nconst JulianMillennium = JulianCentury * 10 // Days in Julian millennium\n\nconst TropicalYear = 365.24219878 // Mean solar tropical year\n\n// DTR -- Degrees to radians\n\nfunction dtr (d) {\n  return (d * Math.PI) / 180.0\n}\n\n// RTD -- Radians to degrees\n\nfunction rtd (r) {\n  return (r * 180.0) / Math.PI\n}\n\n// FIXANGLE -- Range reduce angle in degrees\n\nfunction fixangle (a) {\n  return a - 360.0 * Math.floor(a / 360.0)\n}\n\n// FIXANGR -- Range reduce angle in radians\n\nfunction fixangr (a) {\n  return a - 2 * Math.PI * Math.floor(a / (2 * Math.PI))\n}\n\n// DSIN -- Sine of an angle in degrees\n\nfunction dsin (d) {\n  return Math.sin(dtr(d))\n}\n\n// DCOS -- Cosine of an angle in degrees\n\nfunction dcos (d) {\n  return Math.cos(dtr(d))\n}\n\n// MOD -- Modulus function which works for non-integers\n\nfunction mod (a, b) {\n  return a - b * Math.floor(a / b)\n}\n\n// JWDAY -- Calculate day of week from Julian day\n\nconst Weekdays = [\n  'Sunday',\n  'Monday',\n  'Tuesday',\n  'Wednesday',\n  'Thursday',\n  'Friday',\n  'Saturday'\n]\n\nfunction jwday (j) {\n  return mod(Math.floor(j + 1.5), 7)\n}\n\n/*  OBLIQEQ -- Calculate the obliquity of the ecliptic for a given\n               Julian date. This uses Laskar's tenth-degree\n               polynomial fit (J. Laskar, Astronomy and\n               Astrophysics, Vol. 157, page 68 [1986]) which is\n               accurate to within 0.01 arc second between AD 1000\n               and AD 3000, and within a few seconds of arc for\n               +/-10000 years around AD 2000. If we're outside the\n               range in which this fit is valid (deep time) we\n               simply return the J2000 value of the obliquity, which\n               happens to be almost precisely the mean.  */\n\nconst oterms = [\n  -4680.93, -1.55, 1999.25, -51.38, -249.67, -39.05, 7.12, 27.87, 5.79, 2.45\n]\n\nfunction obliqeq (jd) {\n  let eps, u, v, i\n\n  v = u = (jd - J2000) / (JulianCentury * 100)\n\n  eps = 23 + 26 / 60.0 + 21.448 / 3600.0\n\n  if (Math.abs(u) < 1.0) {\n    for (i = 0; i < 10; i++) {\n      eps += (oterms[i] / 3600.0) * v\n      v *= u\n    }\n  }\n  return eps\n}\n\n/*  Periodic terms for nutation in longiude (delta \\Psi) and\n    obliquity (delta \\Epsilon) as given in table 21.A of\n    Meeus, \"Astronomical Algorithms,\" first edition.  */\n\n// prettier-ignore\nconst nutArgMult = [\n  0, 0, 0, 0, 1, -2, 0, 0, 2, 2, 0, 0, 0, 2, 2, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0,\n  0, 1, 0, 0, -2, 1, 0, 2, 2, 0, 0, 0, 2, 1, 0, 0, 1, 2, 2, -2, -1, 0, 2, 2, -2,\n  0, 1, 0, 0, -2, 0, 0, 2, 1, 0, 0, -1, 2, 2, 2, 0, 0, 0, 0, 0, 0, 1, 0, 1, 2,\n  0, -1, 2, 2, 0, 0, -1, 0, 1, 0, 0, 1, 2, 1, -2, 0, 2, 0, 0, 0, 0, -2, 2, 1, 2,\n  0, 0, 2, 2, 0, 0, 2, 2, 2, 0, 0, 2, 0, 0, -2, 0, 1, 2, 2, 0, 0, 0, 2, 0, -2,\n  0, 0, 2, 0, 0, 0, -1, 2, 1, 0, 2, 0, 0, 0, 2, 0, -1, 0, 1, -2, 2, 0, 2, 2, 0,\n  1, 0, 0, 1, -2, 0, 1, 0, 1, 0, -1, 0, 0, 1, 0, 0, 2, -2, 0, 2, 0, -1, 2, 1, 2,\n  0, 1, 2, 2, 0, 1, 0, 2, 2, -2, 1, 1, 0, 0, 0, -1, 0, 2, 2, 2, 0, 0, 2, 1, 2,\n  0, 1, 0, 0, -2, 0, 2, 2, 2, -2, 0, 1, 2, 1, 2, 0, -2, 0, 1, 2, 0, 0, 0, 1, 0,\n  -1, 1, 0, 0, -2, -1, 0, 2, 1, -2, 0, 0, 0, 1, 0, 0, 2, 2, 1, -2, 0, 2, 0, 1,\n  -2, 1, 0, 2, 1, 0, 0, 1, -2, 0, -1, 0, 1, 0, 0, -2, 1, 0, 0, 0, 1, 0, 0, 0, 0,\n  0, 0, 1, 2, 0, -1, -1, 1, 0, 0, 0, 1, 1, 0, 0, 0, -1, 1, 2, 2, 2, -1, -1, 2,\n  2, 0, 0, -2, 2, 2, 0, 0, 3, 2, 2, 2, -1, 0, 2, 2\n]\n\n// prettier-ignore\nconst nutArgCoeff = [\n  -171996, -1742, 92095, 89, -13187, -16, 5736, -31, -2274, -2, 977, -5, 2062,\n  2, -895, 5, 1426, -34, 54, -1, 712, 1, -7, 0, -517, 12, 224, -6, -386, -4,\n  200, 0, -301, 0, 129, -1, 217, -5, -95, 3, -158, 0, 0, 0, 129, 1, -70, 0, 123,\n  0, -53, 0, 63, 0, 0, 0, 63, 1, -33, 0, -59, 0, 26, 0, -58, -1, 32, 0, -51, 0,\n  27, 0, 48, 0, 0, 0, 46, 0, -24, 0, -38, 0, 16, 0, -31, 0, 13, 0, 29, 0, 0, 0,\n  29, 0, -12, 0, 26, 0, 0, 0, -22, 0, 0, 0, 21, 0, -10, 0, 17, -1, 0, 0, 16, 0,\n  -8, 0, -16, 1, 7, 0, -15, 0, 9, 0, -13, 0, 7, 0, -12, 0, 6, 0, 11, 0, 0, 0,\n  -10, 0, 5, 0, -8, 0, 3, 0, 7, 0, -3, 0, -7, 0, 0, 0, -7, 0, 3, 0, -7, 0, 3, 0,\n  6, 0, 0, 0, 6, 0, -3, 0, 6, 0, -3, 0, -6, 0, 3, 0, -6, 0, 3, 0, 5, 0, 0, 0,\n  -5, 0, 3, 0, -5, 0, 3, 0, -5, 0, 3, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, -4,\n  0, 0, 0, -4, 0, 0, 0, -4, 0, 0, 0, 3, 0, 0, 0, -3, 0, 0, 0, -3, 0, 0, 0, -3,\n  0, 0, 0, -3, 0, 0, 0, -3, 0, 0, 0, -3, 0, 0, 0, -3, 0, 0, 0\n]\n\n/*  NUTATION -- Calculate the nutation in longitude, deltaPsi, and\n                obliquity, deltaEpsilon for a given Julian date\n                jd. Results are returned as a two element Array\n                giving (deltaPsi, deltaEpsilon) in degrees.  */\n\nfunction nutation (jd) {\n  let i\n  let j\n  const t = (jd - 2451545.0) / 36525.0\n  let t2\n  const ta = []\n  let dp = 0\n  let de = 0\n  let ang\n\n  const t3 = t * (t2 = t * t)\n\n  /*  Calculate angles. The correspondence between the elements\n      of our array and the terms cited in Meeus are:\n\n      ta[0] = D  ta[0] = M  ta[2] = M'  ta[3] = F  ta[4] = \\Omega\n\n  */\n\n  ta[0] = dtr(297.850363 + 445267.11148 * t - 0.0019142 * t2 + t3 / 189474.0)\n  ta[1] = dtr(357.52772 + 35999.05034 * t - 0.0001603 * t2 - t3 / 300000.0)\n  ta[2] = dtr(134.96298 + 477198.867398 * t + 0.0086972 * t2 + t3 / 56250.0)\n  ta[3] = dtr(93.27191 + 483202.017538 * t - 0.0036825 * t2 + t3 / 327270)\n  ta[4] = dtr(125.04452 - 1934.136261 * t + 0.0020708 * t2 + t3 / 450000.0)\n\n  /*  Range reduce the angles in case the sine and cosine functions\n      don't do it as accurately or quickly.  */\n\n  for (i = 0; i < 5; i++) {\n    ta[i] = fixangr(ta[i])\n  }\n\n  const to10 = t / 10.0\n  for (i = 0; i < 63; i++) {\n    ang = 0\n    for (j = 0; j < 5; j++) {\n      if (nutArgMult[i * 5 + j] !== 0) {\n        ang += nutArgMult[i * 5 + j] * ta[j]\n      }\n    }\n    dp +=\n      (nutArgCoeff[i * 4 + 0] + nutArgCoeff[i * 4 + 1] * to10) * Math.sin(ang)\n    de +=\n      (nutArgCoeff[i * 4 + 2] + nutArgCoeff[i * 4 + 3] * to10) * Math.cos(ang)\n  }\n\n  /*  Return the result, converting from ten thousandths of arc\n      seconds to radians in the process.  */\n\n  const deltaPsi = dp / (3600.0 * 10000.0)\n  const deltaEpsilon = de / (3600.0 * 10000.0)\n\n  return [deltaPsi, deltaEpsilon]\n}\n\n/*  DELTAT -- Determine the difference, in seconds, between\n              Dynamical time and Universal time.  */\n\n/*  Table of observed Delta T values at the beginning of\n    even numbered years from 1620 through 2002.  */\n\n// prettier-ignore\nconst deltaTtab = [\n  121, 112, 103, 95, 88, 82, 77, 72, 68, 63, 60, 56, 53, 51, 48, 46, 44, 42, 40,\n  38, 35, 33, 31, 29, 26, 24, 22, 20, 18, 16, 14, 12, 11, 10, 9, 8, 7, 7, 7, 7,\n  7, 7, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11,\n  12, 12, 12, 12, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 15, 16, 16, 16,\n  16, 16, 16, 16, 16, 15, 15, 14, 13, 13.1, 12.5, 12.2, 12, 12, 12, 12, 12, 12,\n  11.9, 11.6, 11, 10.2, 9.2, 8.2, 7.1, 6.2, 5.6, 5.4, 5.3, 5.4, 5.6, 5.9, 6.2,\n  6.5, 6.8, 7.1, 7.3, 7.5, 7.6, 7.7, 7.3, 6.2, 5.2, 2.7, 1.4, -1.2, -2.8, -3.8,\n  -4.8, -5.5, -5.3, -5.6, -5.7, -5.9, -6, -6.3, -6.5, -6.2, -4.7, -2.8, -0.1,\n  2.6, 5.3, 7.7, 10.4, 13.3, 16, 18.2, 20.2, 21.1, 22.4, 23.5, 23.8, 24.3, 24,\n  23.9, 23.9, 23.7, 24, 24.3, 25.3, 26.2, 27.3, 28.2, 29.1, 30, 30.7, 31.4,\n  32.2, 33.1, 34, 35, 36.5, 38.3, 40.2, 42.2, 44.5, 46.5, 48.5, 50.5, 52.2,\n  53.8, 54.9, 55.8, 56.9, 58.3, 60, 61.6, 63, 65, 66.6\n]\n\nfunction deltat (year) {\n  let dt, f, i, t\n\n  if (year >= 1620 && year <= 2000) {\n    i = Math.floor((year - 1620) / 2)\n    f = (year - 1620) / 2 - i // Fractional part of year\n    dt = deltaTtab[i] + (deltaTtab[i + 1] - deltaTtab[i]) * f\n  } else {\n    t = (year - 2000) / 100\n    if (year < 948) {\n      dt = 2177 + 497 * t + 44.1 * t * t\n    } else {\n      dt = 102 + 102 * t + 25.3 * t * t\n      if (year > 2000 && year < 2100) {\n        dt += 0.37 * (year - 2100)\n      }\n    }\n  }\n  return dt\n}\n\n/*  EQUINOX -- Determine the Julian Ephemeris Day of an\n               equinox or solstice. The \"which\" argument\n               selects the item to be computed:\n\n                  0   March equinox\n                  1   June solstice\n                  2   September equinox\n                  3   December solstice\n*/\n\n// Periodic terms to obtain true time\n\n// prettier-ignore\nconst EquinoxpTerms = [\n  485, 324.96, 1934.136, 203, 337.23, 32964.467, 199, 342.08, 20.186, 182,\n  27.85, 445267.112, 156, 73.14, 45036.886, 136, 171.52, 22518.443, 77, 222.54,\n  65928.934, 74, 296.72, 3034.906, 70, 243.58, 9037.513, 58, 119.81, 33718.147,\n  52, 297.17, 150.678, 50, 21.02, 2281.226, 45, 247.54, 29929.562, 44, 325.15,\n  31555.956, 29, 60.93, 4443.417, 18, 155.12, 67555.328, 17, 288.79, 4562.452,\n  16, 198.04, 62894.029, 14, 199.76, 31436.921, 12, 95.39, 14577.848, 12,\n  287.11, 31931.756, 12, 320.81, 34777.259, 9, 227.73, 1222.114, 8, 15.45,\n  16859.074\n]\n\nconst JDE0tab1000 = [\n  [1721139.29189, 365242.1374, 0.06134, 0.00111, -0.00071],\n  [1721233.25401, 365241.72562, -0.05323, 0.00907, 0.00025],\n  [1721325.70455, 365242.49558, -0.11677, -0.00297, 0.00074],\n  [1721414.39987, 365242.88257, -0.00769, -0.00933, -0.00006]\n]\n\nconst JDE0tab2000 = [\n  [2451623.80984, 365242.37404, 0.05169, -0.00411, -0.00057],\n  [2451716.56767, 365241.62603, 0.00325, 0.00888, -0.0003],\n  [2451810.21715, 365242.01767, -0.11575, 0.00337, 0.00078],\n  [2451900.05952, 365242.74049, -0.06223, -0.00823, 0.00032]\n]\n\nfunction equinox (year, which) {\n  let i, j, JDE0tab, S, Y\n\n  /*  Initialise terms for mean equinox and solstices. We\n      have two sets: one for years prior to 1000 and a second\n      for subsequent years.  */\n\n  if (year < 1000) {\n    JDE0tab = JDE0tab1000\n    Y = year / 1000\n  } else {\n    JDE0tab = JDE0tab2000\n    Y = (year - 2000) / 1000\n  }\n\n  const JDE0 =\n    JDE0tab[which][0] +\n    JDE0tab[which][1] * Y +\n    JDE0tab[which][2] * Y * Y +\n    JDE0tab[which][3] * Y * Y * Y +\n    JDE0tab[which][4] * Y * Y * Y * Y\n\n  const T = (JDE0 - 2451545.0) / 36525\n  const W = 35999.373 * T - 2.47\n  const deltaL = 1 + 0.0334 * dcos(W) + 0.0007 * dcos(2 * W)\n\n  // Sum the periodic terms for time T\n\n  S = 0\n  for (i = j = 0; i < 24; i++) {\n    S +=\n      EquinoxpTerms[j] * dcos(EquinoxpTerms[j + 1] + EquinoxpTerms[j + 2] * T)\n    j += 3\n  }\n\n  const JDE = JDE0 + (S * 0.00001) / deltaL\n\n  return JDE\n}\n\n/*  SUNPOS -- Position of the Sun. Please see the comments\n              on the return statement at the end of this function\n              which describe the array it returns. We return\n              intermediate values because they are useful in a\n              variety of other contexts.  */\n\nfunction sunpos (jd) {\n  let L0, M, Alpha, AlphaApp\n\n  const T = (jd - J2000) / JulianCentury\n  const T2 = T * T\n\n  L0 = 280.46646 + 36000.76983 * T + 0.0003032 * T2\n  L0 = fixangle(L0)\n\n  M = 357.52911 + 35999.05029 * T + -0.0001537 * T2\n  M = fixangle(M)\n\n  const e = 0.016708634 + -0.000042037 * T + -0.0000001267 * T2\n\n  const C =\n    (1.914602 + -0.004817 * T + -0.000014 * T2) * dsin(M) +\n    (0.019993 - 0.000101 * T) * dsin(2 * M) +\n    0.000289 * dsin(3 * M)\n\n  const sunLong = L0 + C\n  const sunAnomaly = M + C\n  const sunR = (1.000001018 * (1 - e * e)) / (1 + e * dcos(sunAnomaly))\n  const Omega = 125.04 - 1934.136 * T\n  const Lambda = sunLong + -0.00569 + -0.00478 * dsin(Omega)\n  const epsilon0 = obliqeq(jd)\n  const epsilon = epsilon0 + 0.00256 * dcos(Omega)\n\n  Alpha = rtd(Math.atan2(dcos(epsilon0) * dsin(sunLong), dcos(sunLong)))\n  Alpha = fixangle(Alpha)\n\n  const Delta = rtd(Math.asin(dsin(epsilon0) * dsin(sunLong)))\n\n  AlphaApp = rtd(Math.atan2(dcos(epsilon) * dsin(Lambda), dcos(Lambda)))\n  AlphaApp = fixangle(AlphaApp)\n\n  const DeltaApp = rtd(Math.asin(dsin(epsilon) * dsin(Lambda)))\n\n  return [\n    // Angular quantities are expressed in decimal degrees\n    L0, // [0] Geometric mean longitude of the Sun\n    M, // [1] Mean anomaly of the Sun\n    e, // [2] Eccentricity of the Earth's orbit\n    C, // [3] Sun's equation of the Centre\n    sunLong, // [4] Sun's true longitude\n    sunAnomaly, // [5] Sun's true anomaly\n    sunR, // [6] Sun's radius vector in AU\n    Lambda, // [7] Sun's apparent longitude at true equinox of the date\n    Alpha, // [8] Sun's true right ascension\n    Delta, // [9] Sun's true declination\n    AlphaApp, // [10] Sun's apparent right ascension\n    DeltaApp // [11] Sun's apparent declination\n  ]\n}\n\n/*  EQUATIONOFTIME -- Compute equation of time for a given moment.\n                      Returns the equation of time as a fraction of\n                      a day.  */\n\nfunction equationOfTime (jd) {\n  let E, L0\n\n  const tau = (jd - J2000) / JulianMillennium\n\n  L0 =\n    280.4664567 +\n    360007.6982779 * tau +\n    0.03032028 * tau * tau +\n    (tau * tau * tau) / 49931 +\n    -((tau * tau * tau * tau) / 15300) +\n    -((tau * tau * tau * tau * tau) / 2000000)\n\n  L0 = fixangle(L0)\n\n  const alpha = sunpos(jd)[10]\n  const deltaPsi = nutation(jd)[0]\n  const epsilon = obliqeq(jd) + nutation(jd)[1]\n\n  E = L0 + -0.0057183 + -alpha + deltaPsi * dcos(epsilon)\n  E = E - 20.0 * Math.floor(E / 20.0)\n  E = E / (24 * 60)\n\n  return E\n}\n\n/*\n       JavaScript functions for the Fourmilab Calendar Converter\n\n                  by John Walker -- September, MIM\n              http://www.fourmilab.ch/documents/calendar/\n\n                This program is in the public domain.\n*/\n\nconst NormLeap = ['Normal year', 'Leap year']\n\n// A global variable for the Julian day value\nlet julianDay\n\n// LEAP_GREGORIAN -- Is a given year in the Gregorian calendar a leap year?\n\nfunction leapGregorian (year) {\n  return year % 4 === 0 && !(year % 100 === 0 && year % 400 !== 0)\n}\n\n// GREGORIAN_TO_JD -- Determine Julian day number from Gregorian calendar date\n\nconst GREGORIAN_EPOCH = 1721425.5\n\nfunction gregorianToJd (year, month, day) {\n  return (\n    GREGORIAN_EPOCH -\n    1 +\n    365 * (year - 1) +\n    Math.floor((year - 1) / 4) +\n    -Math.floor((year - 1) / 100) +\n    Math.floor((year - 1) / 400) +\n    Math.floor(\n      (367 * month - 362) / 12 +\n        (month <= 2 ? 0 : leapGregorian(year) ? -1 : -2) +\n        day\n    )\n  )\n}\n\n// JD_TO_GREGORIAN -- Calculate Gregorian calendar date from Julian day\n\nfunction jdToGregorian (jd) {\n  let year\n\n  const wjd = Math.floor(jd - 0.5) + 0.5\n  const depoch = wjd - GREGORIAN_EPOCH\n  const quadricent = Math.floor(depoch / 146097)\n  const dqc = mod(depoch, 146097)\n  const cent = Math.floor(dqc / 36524)\n  const dcent = mod(dqc, 36524)\n  const quad = Math.floor(dcent / 1461)\n  const dquad = mod(dcent, 1461)\n  const yindex = Math.floor(dquad / 365)\n  year = quadricent * 400 + cent * 100 + quad * 4 + yindex\n  if (!(cent === 4 || yindex === 4)) {\n    year++\n  }\n  const yearday = wjd - gregorianToJd(year, 1, 1)\n  const leapadj =\n    wjd < gregorianToJd(year, 3, 1) ? 0 : leapGregorian(year) ? 1 : 2\n  const month = Math.floor(((yearday + leapadj) * 12 + 373) / 367)\n  const day = wjd - gregorianToJd(year, month, 1) + 1\n\n  return [year, month, day]\n}\n\n// JULIAN_TO_JD -- Determine Julian day number from Julian calendar date\n\nfunction leapJulian (year) {\n  return mod(year, 4) === (year > 0 ? 0 : 3)\n}\n\nfunction julianToJd (year, month, day) {\n  // Adjust negative common era years to the zero-based notation we use.\n\n  if (year < 1) {\n    year++\n  }\n\n  // Algorithm as given in Meeus, Astronomical Algorithms, chapter 7, page 61\n\n  if (month <= 2) {\n    year--\n    month += 12\n  }\n\n  return (\n    Math.floor(365.25 * (year + 4716)) +\n    Math.floor(30.6001 * (month + 1)) +\n    day -\n    1524.5\n  )\n}\n\n// JD_TO_JULIAN -- Calculate Julian calendar date from Julian day\n\nfunction jdToJulian (td) {\n  let year\n\n  td += 0.5\n  const z = Math.floor(td)\n\n  const a = z\n  const b = a + 1524\n  const c = Math.floor((b - 122.1) / 365.25)\n  const d = Math.floor(365.25 * c)\n  const e = Math.floor((b - d) / 30.6001)\n\n  const month = Math.floor(e < 14 ? e - 1 : e - 13)\n  year = Math.floor(month > 2 ? c - 4716 : c - 4715)\n  const day = b - d - Math.floor(30.6001 * e)\n\n  /*  If year is less than 1, subtract one to convert from\n        a zero based date system to the common era system in\n        which the year -1 (1 B.C.E) is followed by year 1 (1 C.E.).  */\n\n  if (year < 1) {\n    year--\n  }\n\n  return [year, month, day]\n}\n\n// HEBREW_TO_JD -- Determine Julian day from Hebrew date\n\nconst HEBREW_EPOCH = 347995.5\n\n// Is a given Hebrew year a leap year ?\n\nfunction hebrewLeap (year) {\n  return mod(year * 7 + 1, 19) < 7\n}\n\n// How many months are there in a Hebrew year (12 = normal, 13 = leap)\n\nfunction hebrewYearMonths (year) {\n  return hebrewLeap(year) ? 13 : 12\n}\n\n// Test for delay of start of new year and to avoid\n// Sunday, Wednesday, and Friday as start of the new year.\n\nfunction hebrewDelay1 (year) {\n  const months = Math.floor((235 * year - 234) / 19)\n  const parts = 12084 + 13753 * months\n  let day = months * 29 + Math.floor(parts / 25920)\n\n  if (mod(3 * (day + 1), 7) < 3) {\n    day++\n  }\n  return day\n}\n\n// Check for delay in start of new year due to length of adjacent years\n\nfunction hebrewDelay2 (year) {\n  const last = hebrewDelay1(year - 1)\n  const present = hebrewDelay1(year)\n  const next = hebrewDelay1(year + 1)\n\n  return next - present === 356 ? 2 : present - last === 382 ? 1 : 0\n}\n\n// How many days are in a Hebrew year ?\n\nfunction hebrewYearDays (year) {\n  return hebrewToJd(year + 1, 7, 1) - hebrewToJd(year, 7, 1)\n}\n\n// How many days are in a given month of a given year\n\nfunction hebrewMonthDays (year, month) {\n  // First of all, dispose of fixed-length 29 day months\n\n  if (\n    month === 2 ||\n    month === 4 ||\n    month === 6 ||\n    month === 10 ||\n    month === 13\n  ) {\n    return 29\n  }\n\n  // If it's not a leap year, Adar has 29 days\n\n  if (month === 12 && !hebrewLeap(year)) {\n    return 29\n  }\n\n  // If it's Heshvan, days depend on length of year\n\n  if (month === 8 && mod(hebrewYearDays(year), 10) !== 5) {\n    return 29\n  }\n\n  // Similarly, Kislev varies with the length of year\n\n  if (month === 9 && mod(hebrewYearDays(year), 10) === 3) {\n    return 29\n  }\n\n  // Nope, it's a 30 day month\n\n  return 30\n}\n\n// Finally, wrap it all up into...\n\nfunction hebrewToJd (year, month, day) {\n  let jd, mon\n\n  const months = hebrewYearMonths(year)\n  jd = HEBREW_EPOCH + hebrewDelay1(year) + hebrewDelay2(year) + day + 1\n\n  if (month < 7) {\n    for (mon = 7; mon <= months; mon++) {\n      jd += hebrewMonthDays(year, mon)\n    }\n    for (mon = 1; mon < month; mon++) {\n      jd += hebrewMonthDays(year, mon)\n    }\n  } else {\n    for (mon = 7; mon < month; mon++) {\n      jd += hebrewMonthDays(year, mon)\n    }\n  }\n\n  return jd\n}\n\n/*  JD_TO_HEBREW -- Convert Julian date to Hebrew date.\n                    This works by making multiple calls to\n                    the inverse function, and this is very\n                    slow.  */\n\nfunction jdToHebrew (jd) {\n  let year, month, i\n\n  jd = Math.floor(jd) + 0.5\n  const count = Math.floor(((jd - HEBREW_EPOCH) * 98496.0) / 35975351.0)\n  year = count - 1\n  for (i = count; jd >= hebrewToJd(i, 7, 1); i++) {\n    year++\n  }\n  const first = jd < hebrewToJd(year, 1, 1) ? 7 : 1\n  month = first\n  for (i = first; jd > hebrewToJd(year, i, hebrewMonthDays(year, i)); i++) {\n    month++\n  }\n  const day = jd - hebrewToJd(year, month, 1) + 1\n  return [year, month, day]\n}\n\n// LEAP_ISLAMIC -- Is a given year a leap year in the Islamic calendar?\n\nfunction leapIslamic (year) {\n  return (year * 11 + 14) % 30 < 11\n}\n\n// ISLAMIC_TO_JD -- Determine Julian day from Islamic date\n\nconst ISLAMIC_EPOCH = 1948439.5\nconst ISLAMIC_WEEKDAYS = [\n  'al-Ahad',\n  'al-Ithnayn',\n  'al-Thulatha\\u2019',\n  'al-Arbi\\u2018a\\u2019',\n  'al-Khamis',\n  'al-Jum\\u2018ah',\n  'al-Sabt'\n]\n\nfunction islamicToJd (year, month, day) {\n  return (\n    day +\n    Math.ceil(29.5 * (month - 1)) +\n    (year - 1) * 354 +\n    Math.floor((3 + 11 * year) / 30) +\n    ISLAMIC_EPOCH -\n    1\n  )\n}\n\n// JD_TO_ISLAMIC -- Calculate Islamic date from Julian day\n\nfunction jdToIslamic (jd) {\n  jd = Math.floor(jd) + 0.5\n  const year = Math.floor((30 * (jd - ISLAMIC_EPOCH) + 10646) / 10631)\n  const month = Math.min(\n    12,\n    Math.ceil((jd - (29 + islamicToJd(year, 1, 1))) / 29.5) + 1\n  )\n  const day = jd - islamicToJd(year, month, 1) + 1\n  return [year, month, day]\n}\n\n/*  TEHRAN_EQUINOX -- Determine Julian day and fraction of the\n                      March equinox at the Tehran meridian in\n                      a given Gregorian year.  */\n\nfunction tehranEquinox (year) {\n  // March equinox in dynamical time\n  const equJED = equinox(year, 0)\n\n  // Correct for delta T to obtain Universal time\n  const equJD = equJED - deltat(year) / (24 * 60 * 60)\n\n  // Apply the equation of time to yield the apparent time at Greenwich\n  const equAPP = equJD + equationOfTime(equJED)\n\n  /*  Finally, we must correct for the constant difference between\n        the Greenwich meridian andthe time zone standard for\n        Iran Standard time, 52\u00B030' to the East.  */\n\n  const dtTehran = (52 + 30 / 60.0 + 0 / (60.0 * 60.0)) / 360\n  const equTehran = equAPP + dtTehran\n\n  return equTehran\n}\n\n/*  TEHRAN_EQUINOX_JD -- Calculate Julian day during which the\n                         March equinox, reckoned from the Tehran\n                         meridian, occurred for a given Gregorian\n                         year.  */\n\nfunction tehranEquinoxJd (year) {\n  const ep = tehranEquinox(year)\n  const epg = Math.floor(ep)\n\n  return epg\n}\n\n/*  PERSIANA_YEAR -- Determine the year in the Persian\n                     astronomical calendar in which a\n                     given Julian day falls. Returns an\n                     array of two elements:\n\n                        [0] Persian year\n                        [1] Julian day number containing\n                            equinox for this year\n*/\n\nconst PERSIAN_EPOCH = 1948320.5\nconst PERSIAN_WEEKDAYS = [\n  'Yekshanbeh',\n  'Doshanbeh',\n  'Sehshanbeh',\n  'Chaharshanbeh',\n  'Panjshanbeh',\n  'Jom\\u2018eh',\n  'Shanbeh'\n]\n\nfunction persianaYear (jd) {\n  let guess = jdToGregorian(jd)[0] - 2\n  let lasteq\n  let nexteq\n\n  lasteq = tehranEquinoxJd(guess)\n  while (lasteq > jd) {\n    guess--\n    lasteq = tehranEquinoxJd(guess)\n  }\n  nexteq = lasteq - 1\n  while (!(lasteq <= jd && jd < nexteq)) {\n    lasteq = nexteq\n    guess++\n    nexteq = tehranEquinoxJd(guess)\n  }\n  const adr = Math.round((lasteq - PERSIAN_EPOCH) / TropicalYear) + 1\n\n  return [adr, lasteq]\n}\n\n/*  JD_TO_PERSIANA -- Calculate date in the Persian astronomical\n                      calendar from Julian day.  */\n\nfunction jdToPersiana (jd) {\n  let day\n\n  jd = Math.floor(jd) + 0.5\n  const adr = persianaYear(jd)\n  const year = adr[0]\n  const equinox = adr[1]\n  day = Math.floor((jd - equinox) / 30) + 1\n\n  const yday = Math.floor(jd) - persianaToJd(year, 1, 1) + 1\n  const month = yday <= 186 ? Math.ceil(yday / 31) : Math.ceil((yday - 6) / 30)\n  day = Math.floor(jd) - persianaToJd(year, month, 1) + 1\n\n  return [year, month, day]\n}\n\n/*  PERSIANA_TO_JD -- Obtain Julian day from a given Persian\n                      astronomical calendar date.  */\n\nfunction persianaToJd (year, month, day) {\n  let adr, guess\n\n  guess = PERSIAN_EPOCH - 1 + TropicalYear * (year - 1 - 1)\n  adr = [year - 1, 0]\n\n  while (adr[0] < year) {\n    adr = persianaYear(guess)\n    guess = adr[1] + (TropicalYear + 2)\n  }\n  const equinox = adr[1]\n\n  const jd =\n    equinox +\n    (month <= 7 ? (month - 1) * 31 : (month - 1) * 30 + 6) +\n    (day - 1)\n  return jd\n}\n\n/*  LEAP_PERSIANA -- Is a given year a leap year in the Persian\n                     astronomical calendar?  */\n\nfunction leapPersiana (year) {\n  return persianaToJd(year + 1, 1, 1) - persianaToJd(year, 1, 1) > 365\n}\n\n// PERSIAN_TO_JD -- Determine Julian day from Persian date\n\nfunction persianToJd (year, month, day) {\n  const epbase = year - (year >= 0 ? 474 : 473)\n  const epyear = 474 + mod(epbase, 2820)\n\n  return (\n    day +\n    (month <= 7 ? (month - 1) * 31 : (month - 1) * 30 + 6) +\n    Math.floor((epyear * 682 - 110) / 2816) +\n    (epyear - 1) * 365 +\n    Math.floor(epbase / 2820) * 1029983 +\n    (PERSIAN_EPOCH - 1)\n  )\n}\n\n// JD_TO_PERSIAN -- Calculate Persian date from Julian day\n\nfunction jdToPersian (jd) {\n  let year, ycycle, aux1, aux2\n\n  jd = Math.floor(jd) + 0.5\n\n  const depoch = jd - persianToJd(475, 1, 1)\n  const cycle = Math.floor(depoch / 1029983)\n  const cyear = mod(depoch, 1029983)\n  if (cyear === 1029982) {\n    ycycle = 2820\n  } else {\n    aux1 = Math.floor(cyear / 366)\n    aux2 = mod(cyear, 366)\n    ycycle =\n      Math.floor((2134 * aux1 + 2816 * aux2 + 2815) / 1028522) + aux1 + 1\n  }\n  year = ycycle + 2820 * cycle + 474\n  if (year <= 0) {\n    year--\n  }\n  const yday = jd - persianToJd(year, 1, 1) + 1\n  const month = yday <= 186 ? Math.ceil(yday / 31) : Math.ceil((yday - 6) / 30)\n  const day = jd - persianToJd(year, month, 1) + 1\n  return [year, month, day]\n}\n\n/*  updateFromGregorian -- Update all calendars from Gregorian.\n                           \"Why not Julian date?\" you ask. Because\n                           starting from Gregorian guarantees we're\n                           already snapped to an integral second, so\n                           we don't get roundoff errors in other\n                           calendars.  */\n\nfunction updateFromGregorian () {\n  const year = Number(document.gregorian.year.value)\n  const mon = document.gregorian.month.selectedIndex\n  const mday = Number(document.gregorian.day.value)\n  const hour = 0\n  const min = 0\n  const sec = 0\n\n  // Update Julian day\n\n  const j =\n    gregorianToJd(year, mon + 1, mday) +\n    Math.floor(sec + 60 * (min + 60 * hour) + 0.5) / 86400.0\n\n  julianDay = j\n\n  // Update day of week in Gregorian box\n\n  const weekday = jwday(j)\n  document.gregorian.wday.value = Weekdays[weekday]\n\n  // Update leap year status in Gregorian box\n\n  document.gregorian.leap.value = NormLeap[leapGregorian(year) ? 1 : 0]\n\n  // Update Julian Calendar\n\n  const julcal = jdToJulian(j)\n  document.juliancalendar.year.value = julcal[0]\n  document.juliancalendar.month.selectedIndex = julcal[1] - 1\n  document.juliancalendar.day.value = julcal[2]\n  document.juliancalendar.leap.value = NormLeap[leapJulian(julcal[0]) ? 1 : 0]\n  document.juliancalendar.wday.value = Weekdays[weekday]\n\n  // Update Hebrew Calendar\n\n  const hebcal = jdToHebrew(j)\n  if (hebrewLeap(hebcal[0])) {\n    document.hebrew.month.options.length = 13\n    document.hebrew.month.options[11] = new Option('Adar I')\n    document.hebrew.month.options[12] = new Option('Veadar')\n  } else {\n    document.hebrew.month.options.length = 12\n    document.hebrew.month.options[11] = new Option('Adar')\n  }\n  document.hebrew.year.value = hebcal[0]\n  document.hebrew.month.selectedIndex = hebcal[1] - 1\n  document.hebrew.day.value = hebcal[2]\n  let hmindex = hebcal[1]\n  if (hmindex === 12 && !hebrewLeap(hebcal[0])) {\n    hmindex = 14\n  }\n  switch (hebrewYearDays(hebcal[0])) {\n    case 353:\n      document.hebrew.leap.value = 'Common deficient (353 days)'\n      break\n\n    case 354:\n      document.hebrew.leap.value = 'Common regular (354 days)'\n      break\n\n    case 355:\n      document.hebrew.leap.value = 'Common complete (355 days)'\n      break\n\n    case 383:\n      document.hebrew.leap.value = 'Embolismic deficient (383 days)'\n      break\n\n    case 384:\n      document.hebrew.leap.value = 'Embolismic regular (384 days)'\n      break\n\n    case 385:\n      document.hebrew.leap.value = 'Embolismic complete (385 days)'\n      break\n\n    default:\n      document.hebrew.leap.value =\n        'Invalid year length: ' + hebrewYearDays(hebcal[0]) + ' days.'\n      break\n  }\n\n  // Update Islamic Calendar\n\n  const islcal = jdToIslamic(j)\n  document.islamic.year.value = islcal[0]\n  document.islamic.month.selectedIndex = islcal[1] - 1\n  document.islamic.day.value = islcal[2]\n  document.islamic.wday.value = 'Yawm ' + ISLAMIC_WEEKDAYS[weekday]\n  document.islamic.leap.value = NormLeap[leapIslamic(islcal[0]) ? 1 : 0]\n\n  // Update Persian Calendar\n\n  let perscal = jdToPersian(j)\n\n  // Update Persian Astronomical Calendar\n\n  perscal = jdToPersiana(j)\n  document.persiana.year.value = perscal[0]\n  document.persiana.month.selectedIndex = perscal[1] - 1\n  document.persiana.day.value = perscal[2]\n  document.persiana.wday.value = PERSIAN_WEEKDAYS[weekday]\n  document.persiana.leap.value = NormLeap[leapPersiana(perscal[0]) ? 1 : 0]\n}\n\n// calcGregorian -- Perform calculation starting with a Gregorian date\n\nfunction calcGregorian () {\n  updateFromGregorian()\n}\n\n// calcJulian -- Perform calculation starting with a Julian date\n\nfunction calcJulian () {\n  const j = julianDay\n  const date = jdToGregorian(j)\n  document.gregorian.year.value = date[0]\n  document.gregorian.month.selectedIndex = date[1] - 1\n  document.gregorian.day.value = date[2]\n  updateFromGregorian()\n}\n\n// setJulian -- Set Julian date and update all calendars\n\nfunction setJulian (j) {\n  julianDay = Number(j)\n  calcJulian()\n}\n\n// calcJulianCalendar -- Update from Julian calendar\n\nfunction calcJulianCalendar () {\n  setJulian(\n    julianToJd(\n      Number(document.juliancalendar.year.value),\n      document.juliancalendar.month.selectedIndex + 1,\n      Number(document.juliancalendar.day.value)\n    )\n  )\n}\n\n// calcHebrew -- Update from Hebrew calendar\n\nfunction calcHebrew () {\n  setJulian(\n    hebrewToJd(\n      Number(document.hebrew.year.value),\n      document.hebrew.month.selectedIndex + 1,\n      Number(document.hebrew.day.value)\n    )\n  )\n}\n\n// calcIslamic -- Update from Islamic calendar\n\nfunction calcIslamic () {\n  setJulian(\n    islamicToJd(\n      Number(document.islamic.year.value),\n      document.islamic.month.selectedIndex + 1,\n      Number(document.islamic.day.value)\n    )\n  )\n}\n\n// calcPersiana -- Update from Persian astronomical calendar\n\nfunction calcPersiana () {\n  setJulian(\n    persianaToJd(\n      Number(document.persiana.year.value),\n      document.persiana.month.selectedIndex + 1,\n      Number(document.persiana.day.value)\n    ) + 0.5\n  )\n}\n\n/*  setDateToToday -- Preset the fields in\n    the request form to today's date.  */\n\nfunction setDateToToday () {\n  const today = new Date()\n\n  /*  The following idiocy is due to bizarre incompatibilities\n        in the behaviour of getYear() between Netscrape and\n        Exploder. The ideal solution is to use getFullYear(),\n        which returns the actual year number, but that would\n        break this code on versions of JavaScript prior to\n        1.2. So, for the moment we use the following code\n        which works for all versions of JavaScript and browsers\n        for all year numbers greater than 1000. When we're willing\n        to require JavaScript 1.2, this may be replaced by\n        the single line:\n\n            document.gregorian.year.value = today.getFullYear();\n\n        Thanks to Larry Gilbert for pointing out this problem.\n    */\n\n  let y = today.getYear()\n  if (y < 1000) {\n    y += 1900\n  }\n\n  document.gregorian.year.value = y\n  document.gregorian.month.selectedIndex = today.getMonth()\n  document.gregorian.day.value = today.getDate()\n}\n\n//\n// MISCELLANY\n//\n\n// On page load, set current date and propagate\nsetDateToToday()\ncalcGregorian()\n\n// Combined function for \"Today\" button\nfunction todayAndCalc () {\n  setDateToToday()\n  calcGregorian()\n}\n\n// Click handlers\ndocument\n  .getElementById('greg-calc-btn')\n  .addEventListener('click', calcGregorian)\ndocument\n  .getElementById('greg-today-btn')\n  .addEventListener('click', todayAndCalc)\ndocument\n  .getElementById('julian-btn')\n  .addEventListener('click', calcJulianCalendar)\ndocument.getElementById('hebrew-btn').addEventListener('click', calcHebrew)\ndocument.getElementById('islamic-btn').addEventListener('click', calcIslamic)\ndocument.getElementById('pers-btn').addEventListener('click', calcPersiana)\n\n// Keydown handlers\n// These mimic clicks so that the extra functions will also be triggered\ndocument.getElementById('gregorian').addEventListener('keydown', (event) => {\n  if (event.key === 'Enter') {\n    document.getElementById('greg-calc-btn').click()\n    document.activeElement.blur()\n  }\n})\ndocument\n  .getElementById('juliancalendar')\n  .addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      document.getElementById('julian-btn').click()\n      document.activeElement.blur()\n    }\n  })\ndocument.getElementById('hebrew').addEventListener('keydown', (event) => {\n  if (event.key === 'Enter') {\n    document.getElementById('hebrew-btn').click()\n    document.activeElement.blur()\n  }\n})\ndocument.getElementById('islamic').addEventListener('keydown', (event) => {\n  if (event.key === 'Enter') {\n    document.getElementById('islamic-btn').click()\n    document.activeElement.blur()\n  }\n})\ndocument.getElementById('persiana').addEventListener('keydown', (event) => {\n  if (event.key === 'Enter') {\n    document.getElementById('pers-btn').click()\n    document.activeElement.blur()\n  }\n})\n"],
  "mappings": "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",
  "names": []
}
