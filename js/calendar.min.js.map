{
  "version": 3,
  "sources": ["../node_modules/.pnpm/github.com+theodore-s-beers+unical@8e18b58ec4ebfc0692f71e9d846776263fc24547/node_modules/unical/unical.ts", "../ts/main.ts"],
  "sourcesContent": ["// This library was initially adapted from the work of John Walker. His license\n// is included below, at two points. As you can imagine, much has been changed\n// over the years...\n\n//\n// Exports\n//\n\nexport {\n  ISLAMIC_WEEKDAYS,\n  NORM_LEAP,\n  PERSIAN_WEEKDAYS,\n  WEEKDAYS,\n  gregorianToJD,\n  hebrewLeap,\n  hebrewToJD,\n  hebrewYearDays,\n  islamicToJD,\n  jdToGregorian,\n  jdToHebrew,\n  jdToIslamic,\n  jdToJulian,\n  jdToPersianA,\n  julianToJD,\n  jWeekday,\n  leapGregorian,\n  leapIslamic,\n  leapJulian,\n  leapPersianA,\n  persianAToJD\n}\n\n/*\n       JavaScript functions for the Fourmilab Calendar Converter\n\n                  by John Walker -- September, MIM\n              http://www.fourmilab.ch/documents/calendar/\n\n                This program is in the public domain.\n*/\n\nconst NORM_LEAP = ['Normal year', 'Leap year']\n\n// LEAP_GREGORIAN -- Is a given year in the Gregorian calendar a leap year?\n\nfunction leapGregorian (year: number) {\n  return year % 4 === 0 && !(year % 100 === 0 && year % 400 !== 0)\n}\n\n// GREGORIAN_TO_JD -- Determine Julian day number from Gregorian calendar date\n\nconst GREGORIAN_EPOCH = 1721425.5\n\nfunction gregorianToJD (year: number, month: number, day: number) {\n  return (\n    GREGORIAN_EPOCH -\n    1 +\n    365 * (year - 1) +\n    Math.floor((year - 1) / 4) +\n    -Math.floor((year - 1) / 100) +\n    Math.floor((year - 1) / 400) +\n    Math.floor(\n      (367 * month - 362) / 12 +\n        (month <= 2 ? 0 : leapGregorian(year) ? -1 : -2) +\n        day\n    )\n  )\n}\n\n// JD_TO_GREGORIAN -- Calculate Gregorian calendar date from Julian day\n\nfunction jdToGregorian (jd: number) {\n  const wjd = Math.floor(jd - 0.5) + 0.5\n  const dEpoch = wjd - GREGORIAN_EPOCH\n  const quadricent = Math.floor(dEpoch / 146097)\n  const dqc = mod(dEpoch, 146097)\n  const cent = Math.floor(dqc / 36524)\n  const dCent = mod(dqc, 36524)\n  const quad = Math.floor(dCent / 1461)\n  const dQuad = mod(dCent, 1461)\n  const yIndex = Math.floor(dQuad / 365)\n  let year = quadricent * 400 + cent * 100 + quad * 4 + yIndex\n  if (!(cent === 4 || yIndex === 4)) {\n    year++\n  }\n  const yearDay = wjd - gregorianToJD(year, 1, 1)\n  const leapAdj =\n    wjd < gregorianToJD(year, 3, 1) ? 0 : leapGregorian(year) ? 1 : 2\n  const month = Math.floor(((yearDay + leapAdj) * 12 + 373) / 367)\n  const day = wjd - gregorianToJD(year, month, 1) + 1\n\n  return [year, month, day]\n}\n\n// JULIAN_TO_JD -- Determine Julian day number from Julian calendar date\n\nfunction leapJulian (year: number) {\n  return mod(year, 4) === (year > 0 ? 0 : 3)\n}\n\nfunction julianToJD (year: number, month: number, day: number) {\n  // Adjust negative common era years to the zero-based notation we use.\n\n  if (year < 1) {\n    year++\n  }\n\n  // Algorithm as given in Meeus, Astronomical Algorithms, chapter 7, page 61\n\n  if (month <= 2) {\n    year--\n    month += 12\n  }\n\n  return (\n    Math.floor(365.25 * (year + 4716)) +\n    Math.floor(30.6001 * (month + 1)) +\n    day -\n    1524.5\n  )\n}\n\n// JD_TO_JULIAN -- Calculate Julian calendar date from Julian day\n\nfunction jdToJulian (td: number) {\n  td += 0.5\n  const z = Math.floor(td)\n\n  const a = z\n  const b = a + 1524\n  const c = Math.floor((b - 122.1) / 365.25)\n  const d = Math.floor(365.25 * c)\n  const e = Math.floor((b - d) / 30.6001)\n\n  const month = Math.floor(e < 14 ? e - 1 : e - 13)\n  let year = Math.floor(month > 2 ? c - 4716 : c - 4715)\n  const day = b - d - Math.floor(30.6001 * e)\n\n  /*  If year is less than 1, subtract one to convert from\n        a zero based date system to the common era system in\n        which the year -1 (1 B.C.E) is followed by year 1 (1 C.E.).  */\n\n  if (year < 1) {\n    year--\n  }\n\n  return [year, month, day]\n}\n\n// HEBREW_TO_JD -- Determine Julian day from Hebrew date\n\nconst HEBREW_EPOCH = 347995.5\n\n// Is a given Hebrew year a leap year ?\n\nfunction hebrewLeap (year: number) {\n  return mod(year * 7 + 1, 19) < 7\n}\n\n// How many months are there in a Hebrew year (12 = normal, 13 = leap)\n\nfunction hebrewYearMonths (year: number) {\n  return hebrewLeap(year) ? 13 : 12\n}\n\n// Test for delay of start of new year and to avoid\n// Sunday, Wednesday, and Friday as start of the new year.\n\nfunction hebrewDelay1 (year: number) {\n  const months = Math.floor((235 * year - 234) / 19)\n  const parts = 12084 + 13753 * months\n  let day = months * 29 + Math.floor(parts / 25920)\n\n  if (mod(3 * (day + 1), 7) < 3) {\n    day++\n  }\n  return day\n}\n\n// Check for delay in start of new year due to length of adjacent years\n\nfunction hebrewDelay2 (year: number) {\n  const last = hebrewDelay1(year - 1)\n  const present = hebrewDelay1(year)\n  const next = hebrewDelay1(year + 1)\n\n  return next - present === 356 ? 2 : present - last === 382 ? 1 : 0\n}\n\n// How many days are in a Hebrew year?\n\nfunction hebrewYearDays (year: number) {\n  return hebrewToJD(year + 1, 7, 1) - hebrewToJD(year, 7, 1)\n}\n\n// How many days are in a given month of a given year\n\nfunction hebrewMonthDays (year: number, month: number) {\n  // First of all, dispose of fixed-length 29 day months\n\n  if (\n    month === 2 ||\n    month === 4 ||\n    month === 6 ||\n    month === 10 ||\n    month === 13\n  ) {\n    return 29\n  }\n\n  // If it's not a leap year, Adar has 29 days\n\n  if (month === 12 && !hebrewLeap(year)) {\n    return 29\n  }\n\n  // If it's Heshvan, days depend on length of year\n\n  if (month === 8 && mod(hebrewYearDays(year), 10) !== 5) {\n    return 29\n  }\n\n  // Similarly, Kislev varies with the length of year\n\n  if (month === 9 && mod(hebrewYearDays(year), 10) === 3) {\n    return 29\n  }\n\n  // Nope, it's a 30 day month\n\n  return 30\n}\n\n// Finally, wrap it all up into...\n\nfunction hebrewToJD (year: number, month: number, day: number) {\n  const months = hebrewYearMonths(year)\n  let jd = HEBREW_EPOCH + hebrewDelay1(year) + hebrewDelay2(year) + day + 1\n  let mon: number\n\n  if (month < 7) {\n    for (mon = 7; mon <= months; mon++) {\n      jd += hebrewMonthDays(year, mon)\n    }\n    for (mon = 1; mon < month; mon++) {\n      jd += hebrewMonthDays(year, mon)\n    }\n  } else {\n    for (mon = 7; mon < month; mon++) {\n      jd += hebrewMonthDays(year, mon)\n    }\n  }\n\n  return jd\n}\n\n/*  JD_TO_HEBREW -- Convert Julian date to Hebrew date.\n                    This works by making multiple calls to\n                    the inverse function, and this is very\n                    slow.  */\n\nfunction jdToHebrew (jd: number) {\n  let i: number\n\n  jd = Math.floor(jd) + 0.5\n  const count = Math.floor(((jd - HEBREW_EPOCH) * 98496.0) / 35975351.0)\n  let year = count - 1\n  for (i = count; jd >= hebrewToJD(i, 7, 1); i++) {\n    year++\n  }\n  const first = jd < hebrewToJD(year, 1, 1) ? 7 : 1\n  let month = first\n  for (i = first; jd > hebrewToJD(year, i, hebrewMonthDays(year, i)); i++) {\n    month++\n  }\n  const day = jd - hebrewToJD(year, month, 1) + 1\n  return [year, month, day]\n}\n\n// LEAP_ISLAMIC -- Is a given year a leap year in the Islamic calendar?\n\nfunction leapIslamic (year: number) {\n  return (year * 11 + 14) % 30 < 11\n}\n\n// ISLAMIC_TO_JD -- Determine Julian day from Islamic date\n\nconst ISLAMIC_EPOCH = 1948439.5\nconst ISLAMIC_WEEKDAYS = [\n  'al-Ahad',\n  'al-Ithnayn',\n  'al-Thulatha\\u2019',\n  'al-Arbi\\u2018a\\u2019',\n  'al-Khamis',\n  'al-Jum\\u2018ah',\n  'al-Sabt'\n]\n\nfunction islamicToJD (year: number, month: number, day: number) {\n  return (\n    day +\n    Math.ceil(29.5 * (month - 1)) +\n    (year - 1) * 354 +\n    Math.floor((3 + 11 * year) / 30) +\n    ISLAMIC_EPOCH -\n    1\n  )\n}\n\n// JD_TO_ISLAMIC -- Calculate Islamic date from Julian day\n\nfunction jdToIslamic (jd: number) {\n  jd = Math.floor(jd) + 0.5\n  const year = Math.floor((30 * (jd - ISLAMIC_EPOCH) + 10646) / 10631)\n  const month = Math.min(\n    12,\n    Math.ceil((jd - (29 + islamicToJD(year, 1, 1))) / 29.5) + 1\n  )\n  const day = jd - islamicToJD(year, month, 1) + 1\n  return [year, month, day]\n}\n\n/*  TEHRAN_EQUINOX -- Determine Julian day and fraction of the\n                      March equinox at the Tehran meridian in\n                      a given Gregorian year.  */\n\nfunction tehranEquinox (year: number) {\n  // March equinox in dynamical time\n  const equJED = equinox(year, 0)\n\n  // Correct for delta T to obtain Universal time\n  const equJD = equJED - deltaT(year) / (24 * 60 * 60)\n\n  // Apply the equation of time to yield the apparent time at Greenwich\n  const equAPP = equJD + equationOfTime(equJED)\n\n  /*  Finally, we must correct for the constant difference between\n        the Greenwich meridian and the time zone standard for\n        Iran Standard time, 52\u00B030' to the East.  */\n\n  const dtTehran = (52 + 30 / 60.0 + 0 / (60.0 * 60.0)) / 360\n  const equTehran = equAPP + dtTehran\n\n  return equTehran\n}\n\n/*  TEHRAN_EQUINOX_JD -- Calculate Julian day during which the\n                         March equinox, reckoned from the Tehran\n                         meridian, occurred for a given Gregorian\n                         year.  */\n\nfunction tehranEquinoxJD (year: number) {\n  const ep = tehranEquinox(year)\n  const epg = Math.floor(ep)\n\n  return epg\n}\n\n/*  PERSIANA_YEAR -- Determine the year in the Persian\n                     astronomical calendar in which a\n                     given Julian day falls. Returns an\n                     array of two elements:\n\n                        [0] Persian year\n                        [1] Julian day number containing\n                            equinox for this year\n*/\n\nconst PERSIAN_EPOCH = 1948320.5\nconst PERSIAN_WEEKDAYS = [\n  'Yekshanbeh',\n  'Doshanbeh',\n  'Sehshanbeh',\n  'Chaharshanbeh',\n  'Panjshanbeh',\n  'Jom\u2018eh',\n  'Shanbeh'\n]\n\nfunction persianAYear (jd: number) {\n  let guess = jdToGregorian(jd)[0] - 2\n\n  let lastEq = tehranEquinoxJD(guess)\n  while (lastEq > jd) {\n    guess--\n    lastEq = tehranEquinoxJD(guess)\n  }\n\n  let nextEq = lastEq - 1\n  while (!(lastEq <= jd && jd < nextEq)) {\n    lastEq = nextEq\n    guess++\n    nextEq = tehranEquinoxJD(guess)\n  }\n\n  const adr = Math.round((lastEq - PERSIAN_EPOCH) / TropicalYear) + 1\n\n  return [adr, lastEq]\n}\n\n/*  JD_TO_PERSIANA -- Calculate date in the Persian astronomical\n                      calendar from Julian day.  */\n\nfunction jdToPersianA (jd: number) {\n  jd = Math.floor(jd) + 0.5\n  const adr = persianAYear(jd)\n  const year = adr[0]\n  const equinox = adr[1]\n  let day = Math.floor((jd - equinox) / 30) + 1\n\n  const yDay = Math.floor(jd) - persianAToJD(year, 1, 1) + 1\n  const month = yDay <= 186 ? Math.ceil(yDay / 31) : Math.ceil((yDay - 6) / 30)\n  day = Math.floor(jd) - persianAToJD(year, month, 1) + 1\n\n  return [year, month, day]\n}\n\n/*  PERSIANA_TO_JD -- Obtain Julian day from a given Persian\n                      astronomical calendar date.  */\n\nfunction persianAToJD (year: number, month: number, day: number) {\n  let guess = PERSIAN_EPOCH - 1 + TropicalYear * (year - 1 - 1)\n  let adr = [year - 1, 0]\n\n  while (adr[0] < year) {\n    adr = persianAYear(guess)\n    guess = adr[1] + (TropicalYear + 2)\n  }\n  const equinox = adr[1]\n\n  const jd =\n    equinox + (month <= 7 ? (month - 1) * 31 : (month - 1) * 30 + 6) + (day - 1)\n  return jd\n}\n\n/*  LEAP_PERSIANA -- Is a given year a leap year in the Persian\n                     astronomical calendar?  */\n\nfunction leapPersianA (year: number) {\n  return persianAToJD(year + 1, 1, 1) - persianAToJD(year, 1, 1) > 365\n}\n\n/*\n            JavaScript functions for positional astronomy\n\n                  by John Walker -- September, MIM\n                      http://www.fourmilab.ch/\n\n                This program is in the public domain.\n*/\n\n// Frequently-used constants\n\nconst J2000 = 2451545.0 // Julian day of J2000 epoch\nconst JulianCentury = 36525.0 // Days in Julian century\nconst JulianMillennium = JulianCentury * 10 // Days in Julian millennium\n\nconst TropicalYear = 365.24219878 // Mean solar tropical year\n\n// DTR -- Degrees to radians\n\nfunction dtr (d: number) {\n  return (d * Math.PI) / 180.0\n}\n\n// RTD -- Radians to degrees\n\nfunction rtd (r: number) {\n  return (r * 180.0) / Math.PI\n}\n\n// FIXANGLE -- Range reduce angle in degrees\n\nfunction fixAngle (a: number) {\n  return a - 360.0 * Math.floor(a / 360.0)\n}\n\n// FIXANGR -- Range reduce angle in radians\n\nfunction fixAngR (a: number) {\n  return a - 2 * Math.PI * Math.floor(a / (2 * Math.PI))\n}\n\n// DSIN -- Sine of an angle in degrees\n\nfunction dSin (d: number) {\n  return Math.sin(dtr(d))\n}\n\n// DCOS -- Cosine of an angle in degrees\n\nfunction dCos (d: number) {\n  return Math.cos(dtr(d))\n}\n\n// MOD -- Modulus function which works for non-integers\n\nfunction mod (a: number, b: number) {\n  return a - b * Math.floor(a / b)\n}\n\n// JWDAY -- Calculate day of week from Julian day\n\nfunction jWeekday (j: number) {\n  return mod(Math.floor(j + 1.5), 7)\n}\n\nconst WEEKDAYS = [\n  'Sunday',\n  'Monday',\n  'Tuesday',\n  'Wednesday',\n  'Thursday',\n  'Friday',\n  'Saturday'\n]\n\n/*  OBLIQUEQ -- Calculate the obliquity of the ecliptic for a given\n                Julian date. This uses Laskar's tenth-degree\n                polynomial fit (J. Laskar, Astronomy and\n                Astrophysics, Vol. 157, page 68 [1986]) which is\n                accurate to within 0.01 arc second between AD 1000\n                and AD 3000, and within a few seconds of arc for\n                +/-10000 years around AD 2000. If we're outside the\n                range in which this fit is valid (deep time) we\n                simply return the J2000 value of the obliquity, which\n                happens to be almost precisely the mean.  */\n\nconst OTerms = [\n  -4680.93, -1.55, 1999.25, -51.38, -249.67, -39.05, 7.12, 27.87, 5.79, 2.45\n]\n\nfunction obliqueQ (jd: number) {\n  const u = (jd - J2000) / (JulianCentury * 100)\n  let v = u\n\n  let eps = 23 + 26 / 60.0 + 21.448 / 3600.0\n\n  if (Math.abs(u) < 1.0) {\n    for (let i = 0; i < 10; i++) {\n      eps += (OTerms[i] / 3600.0) * v\n      v *= u\n    }\n  }\n\n  return eps\n}\n\n/*  Periodic terms for nutation in longitude (delta \\Psi) and\n    obliquity (delta \\Epsilon) as given in table 21.A of\n    Meeus, \"Astronomical Algorithms,\" first edition.  */\n\nconst NutArgMult = [\n  0, 0, 0, 0, 1, -2, 0, 0, 2, 2, 0, 0, 0, 2, 2, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0,\n  0, 1, 0, 0, -2, 1, 0, 2, 2, 0, 0, 0, 2, 1, 0, 0, 1, 2, 2, -2, -1, 0, 2, 2, -2,\n  0, 1, 0, 0, -2, 0, 0, 2, 1, 0, 0, -1, 2, 2, 2, 0, 0, 0, 0, 0, 0, 1, 0, 1, 2,\n  0, -1, 2, 2, 0, 0, -1, 0, 1, 0, 0, 1, 2, 1, -2, 0, 2, 0, 0, 0, 0, -2, 2, 1, 2,\n  0, 0, 2, 2, 0, 0, 2, 2, 2, 0, 0, 2, 0, 0, -2, 0, 1, 2, 2, 0, 0, 0, 2, 0, -2,\n  0, 0, 2, 0, 0, 0, -1, 2, 1, 0, 2, 0, 0, 0, 2, 0, -1, 0, 1, -2, 2, 0, 2, 2, 0,\n  1, 0, 0, 1, -2, 0, 1, 0, 1, 0, -1, 0, 0, 1, 0, 0, 2, -2, 0, 2, 0, -1, 2, 1, 2,\n  0, 1, 2, 2, 0, 1, 0, 2, 2, -2, 1, 1, 0, 0, 0, -1, 0, 2, 2, 2, 0, 0, 2, 1, 2,\n  0, 1, 0, 0, -2, 0, 2, 2, 2, -2, 0, 1, 2, 1, 2, 0, -2, 0, 1, 2, 0, 0, 0, 1, 0,\n  -1, 1, 0, 0, -2, -1, 0, 2, 1, -2, 0, 0, 0, 1, 0, 0, 2, 2, 1, -2, 0, 2, 0, 1,\n  -2, 1, 0, 2, 1, 0, 0, 1, -2, 0, -1, 0, 1, 0, 0, -2, 1, 0, 0, 0, 1, 0, 0, 0, 0,\n  0, 0, 1, 2, 0, -1, -1, 1, 0, 0, 0, 1, 1, 0, 0, 0, -1, 1, 2, 2, 2, -1, -1, 2,\n  2, 0, 0, -2, 2, 2, 0, 0, 3, 2, 2, 2, -1, 0, 2, 2\n]\n\nconst NutArgCoeff = [\n  -171996, -1742, 92095, 89, -13187, -16, 5736, -31, -2274, -2, 977, -5, 2062,\n  2, -895, 5, 1426, -34, 54, -1, 712, 1, -7, 0, -517, 12, 224, -6, -386, -4,\n  200, 0, -301, 0, 129, -1, 217, -5, -95, 3, -158, 0, 0, 0, 129, 1, -70, 0, 123,\n  0, -53, 0, 63, 0, 0, 0, 63, 1, -33, 0, -59, 0, 26, 0, -58, -1, 32, 0, -51, 0,\n  27, 0, 48, 0, 0, 0, 46, 0, -24, 0, -38, 0, 16, 0, -31, 0, 13, 0, 29, 0, 0, 0,\n  29, 0, -12, 0, 26, 0, 0, 0, -22, 0, 0, 0, 21, 0, -10, 0, 17, -1, 0, 0, 16, 0,\n  -8, 0, -16, 1, 7, 0, -15, 0, 9, 0, -13, 0, 7, 0, -12, 0, 6, 0, 11, 0, 0, 0,\n  -10, 0, 5, 0, -8, 0, 3, 0, 7, 0, -3, 0, -7, 0, 0, 0, -7, 0, 3, 0, -7, 0, 3, 0,\n  6, 0, 0, 0, 6, 0, -3, 0, 6, 0, -3, 0, -6, 0, 3, 0, -6, 0, 3, 0, 5, 0, 0, 0,\n  -5, 0, 3, 0, -5, 0, 3, 0, -5, 0, 3, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, -4,\n  0, 0, 0, -4, 0, 0, 0, -4, 0, 0, 0, 3, 0, 0, 0, -3, 0, 0, 0, -3, 0, 0, 0, -3,\n  0, 0, 0, -3, 0, 0, 0, -3, 0, 0, 0, -3, 0, 0, 0, -3, 0, 0, 0\n]\n\n/*  NUTATION -- Calculate the nutation in longitude, deltaPsi, and\n                obliquity, deltaEpsilon for a given Julian date\n                jd. Results are returned as a two element Array\n                giving (deltaPsi, deltaEpsilon) in degrees.  */\n\nfunction nutation (jd: number) {\n  const t = (jd - 2451545.0) / 36525.0\n  const t2 = Math.pow(t, 2)\n  const t3 = Math.pow(t, 3)\n  const ta = []\n  let dp = 0\n  let de = 0\n\n  /*  Calculate angles. The correspondence between the elements\n      of our array and the terms cited in Meeus are:\n\n      ta[0] = D  ta[0] = M  ta[2] = M'  ta[3] = F  ta[4] = \\Omega\n\n  */\n\n  ta[0] = dtr(297.850363 + 445267.11148 * t - 0.0019142 * t2 + t3 / 189474.0)\n  ta[1] = dtr(357.52772 + 35999.05034 * t - 0.0001603 * t2 - t3 / 300000.0)\n  ta[2] = dtr(134.96298 + 477198.867398 * t + 0.0086972 * t2 + t3 / 56250.0)\n  ta[3] = dtr(93.27191 + 483202.017538 * t - 0.0036825 * t2 + t3 / 327270)\n  ta[4] = dtr(125.04452 - 1934.136261 * t + 0.0020708 * t2 + t3 / 450000.0)\n\n  /*  Range reduce the angles in case the sine and cosine functions\n      don't do it as accurately or quickly.  */\n\n  for (let i = 0; i < 5; i++) {\n    ta[i] = fixAngR(ta[i])\n  }\n\n  const to10 = t / 10.0\n\n  for (let i = 0; i < 63; i++) {\n    let ang = 0\n    for (let j = 0; j < 5; j++) {\n      if (NutArgMult[i * 5 + j] !== 0) {\n        ang += NutArgMult[i * 5 + j] * ta[j]\n      }\n    }\n    dp +=\n      (NutArgCoeff[i * 4 + 0] + NutArgCoeff[i * 4 + 1] * to10) * Math.sin(ang)\n    de +=\n      (NutArgCoeff[i * 4 + 2] + NutArgCoeff[i * 4 + 3] * to10) * Math.cos(ang)\n  }\n\n  /*  Return the result, converting from ten thousandths of arc\n      seconds to radians in the process.  */\n\n  const deltaPsi = dp / (3600.0 * 10000.0)\n  const deltaEpsilon = de / (3600.0 * 10000.0)\n\n  return [deltaPsi, deltaEpsilon]\n}\n\n/*  DELTAT -- Determine the difference, in seconds, between\n              Dynamical time and Universal time.  */\n\n/*  Table of observed Delta T values at the beginning of\n    even numbered years from 1620 through 2002.  */\n\nconst DeltaTTab = [\n  121, 112, 103, 95, 88, 82, 77, 72, 68, 63, 60, 56, 53, 51, 48, 46, 44, 42, 40,\n  38, 35, 33, 31, 29, 26, 24, 22, 20, 18, 16, 14, 12, 11, 10, 9, 8, 7, 7, 7, 7,\n  7, 7, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11,\n  12, 12, 12, 12, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 15, 16, 16, 16,\n  16, 16, 16, 16, 16, 15, 15, 14, 13, 13.1, 12.5, 12.2, 12, 12, 12, 12, 12, 12,\n  11.9, 11.6, 11, 10.2, 9.2, 8.2, 7.1, 6.2, 5.6, 5.4, 5.3, 5.4, 5.6, 5.9, 6.2,\n  6.5, 6.8, 7.1, 7.3, 7.5, 7.6, 7.7, 7.3, 6.2, 5.2, 2.7, 1.4, -1.2, -2.8, -3.8,\n  -4.8, -5.5, -5.3, -5.6, -5.7, -5.9, -6, -6.3, -6.5, -6.2, -4.7, -2.8, -0.1,\n  2.6, 5.3, 7.7, 10.4, 13.3, 16, 18.2, 20.2, 21.1, 22.4, 23.5, 23.8, 24.3, 24,\n  23.9, 23.9, 23.7, 24, 24.3, 25.3, 26.2, 27.3, 28.2, 29.1, 30, 30.7, 31.4,\n  32.2, 33.1, 34, 35, 36.5, 38.3, 40.2, 42.2, 44.5, 46.5, 48.5, 50.5, 52.2,\n  53.8, 54.9, 55.8, 56.9, 58.3, 60, 61.6, 63, 65, 66.6\n]\n\nfunction deltaT (year: number) {\n  let dt: number\n\n  if (year >= 1620 && year <= 2000) {\n    const i = Math.floor((year - 1620) / 2)\n    const f = (year - 1620) / 2 - i // Fractional part of year\n    dt = DeltaTTab[i] + (DeltaTTab[i + 1] - DeltaTTab[i]) * f\n  } else {\n    const t = (year - 2000) / 100\n    if (year < 948) {\n      dt = 2177 + 497 * t + 44.1 * t * t\n    } else {\n      dt = 102 + 102 * t + 25.3 * t * t\n      if (year > 2000 && year < 2100) {\n        dt += 0.37 * (year - 2100)\n      }\n    }\n  }\n  return dt\n}\n\n/*  EQUINOX -- Determine the Julian Ephemeris Day of an\n               equinox or solstice. The \"which\" argument\n               selects the item to be computed:\n\n                  0   March equinox\n                  1   June solstice\n                  2   September equinox\n                  3   December solstice\n*/\n\n// Periodic terms to obtain true time\n\nconst EquinoxPTerms = [\n  485, 324.96, 1934.136, 203, 337.23, 32964.467, 199, 342.08, 20.186, 182,\n  27.85, 445267.112, 156, 73.14, 45036.886, 136, 171.52, 22518.443, 77, 222.54,\n  65928.934, 74, 296.72, 3034.906, 70, 243.58, 9037.513, 58, 119.81, 33718.147,\n  52, 297.17, 150.678, 50, 21.02, 2281.226, 45, 247.54, 29929.562, 44, 325.15,\n  31555.956, 29, 60.93, 4443.417, 18, 155.12, 67555.328, 17, 288.79, 4562.452,\n  16, 198.04, 62894.029, 14, 199.76, 31436.921, 12, 95.39, 14577.848, 12,\n  287.11, 31931.756, 12, 320.81, 34777.259, 9, 227.73, 1222.114, 8, 15.45,\n  16859.074\n]\n\nconst JDE0tab1000 = [\n  [1721139.29189, 365242.1374, 0.06134, 0.00111, -0.00071],\n  [1721233.25401, 365241.72562, -0.05323, 0.00907, 0.00025],\n  [1721325.70455, 365242.49558, -0.11677, -0.00297, 0.00074],\n  [1721414.39987, 365242.88257, -0.00769, -0.00933, -0.00006]\n]\n\nconst JDE0tab2000 = [\n  [2451623.80984, 365242.37404, 0.05169, -0.00411, -0.00057],\n  [2451716.56767, 365241.62603, 0.00325, 0.00888, -0.0003],\n  [2451810.21715, 365242.01767, -0.11575, 0.00337, 0.00078],\n  [2451900.05952, 365242.74049, -0.06223, -0.00823, 0.00032]\n]\n\nfunction equinox (year: number, which: number) {\n  let JDE0tab: number[][]\n  let Y: number\n\n  /*  Initialize terms for mean equinox and solstices. We\n      have two sets: one for years prior to 1000 and a second\n      for subsequent years.  */\n\n  if (year < 1000) {\n    JDE0tab = JDE0tab1000\n    Y = year / 1000\n  } else {\n    JDE0tab = JDE0tab2000\n    Y = (year - 2000) / 1000\n  }\n\n  const JDE0 =\n    JDE0tab[which][0] +\n    JDE0tab[which][1] * Y +\n    JDE0tab[which][2] * Y * Y +\n    JDE0tab[which][3] * Y * Y * Y +\n    JDE0tab[which][4] * Y * Y * Y * Y\n\n  const T = (JDE0 - 2451545.0) / 36525\n  const W = 35999.373 * T - 2.47\n  const deltaL = 1 + 0.0334 * dCos(W) + 0.0007 * dCos(2 * W)\n\n  // Sum the periodic terms for time T\n\n  let S = 0\n  for (let i = 0, j = 0; i < 24; i++) {\n    S +=\n      EquinoxPTerms[j] * dCos(EquinoxPTerms[j + 1] + EquinoxPTerms[j + 2] * T)\n    j += 3\n  }\n\n  const JDE = JDE0 + (S * 0.00001) / deltaL\n\n  return JDE\n}\n\n/*  SUNPOS -- Position of the Sun. Please see the comments\n              on the return statement at the end of this function\n              which describe the array it returns. We return\n              intermediate values because they are useful in a\n              variety of other contexts.  */\n\nfunction sunPos (jd: number) {\n  const T = (jd - J2000) / JulianCentury\n  const T2 = T * T\n\n  let L0 = 280.46646 + 36000.76983 * T + 0.0003032 * T2\n  L0 = fixAngle(L0)\n\n  let M = 357.52911 + 35999.05029 * T + -0.0001537 * T2\n  M = fixAngle(M)\n\n  const e = 0.016708634 + -0.000042037 * T + -0.0000001267 * T2\n\n  const C =\n    (1.914602 + -0.004817 * T + -0.000014 * T2) * dSin(M) +\n    (0.019993 - 0.000101 * T) * dSin(2 * M) +\n    0.000289 * dSin(3 * M)\n\n  const sunLong = L0 + C\n  const sunAnomaly = M + C\n  const sunR = (1.000001018 * (1 - e * e)) / (1 + e * dCos(sunAnomaly))\n  const Omega = 125.04 - 1934.136 * T\n  const Lambda = sunLong + -0.00569 + -0.00478 * dSin(Omega)\n  const epsilon0 = obliqueQ(jd)\n  const epsilon = epsilon0 + 0.00256 * dCos(Omega)\n\n  let Alpha = rtd(Math.atan2(dCos(epsilon0) * dSin(sunLong), dCos(sunLong)))\n  Alpha = fixAngle(Alpha)\n\n  const Delta = rtd(Math.asin(dSin(epsilon0) * dSin(sunLong)))\n\n  let AlphaApp = rtd(Math.atan2(dCos(epsilon) * dSin(Lambda), dCos(Lambda)))\n  AlphaApp = fixAngle(AlphaApp)\n\n  const DeltaApp = rtd(Math.asin(dSin(epsilon) * dSin(Lambda)))\n\n  return [\n    // Angular quantities are expressed in decimal degrees\n    L0, // [0] Geometric mean longitude of the Sun\n    M, // [1] Mean anomaly of the Sun\n    e, // [2] Eccentricity of the Earth's orbit\n    C, // [3] Sun's equation of the Centre\n    sunLong, // [4] Sun's true longitude\n    sunAnomaly, // [5] Sun's true anomaly\n    sunR, // [6] Sun's radius vector in AU\n    Lambda, // [7] Sun's apparent longitude at true equinox of the date\n    Alpha, // [8] Sun's true right ascension\n    Delta, // [9] Sun's true declination\n    AlphaApp, // [10] Sun's apparent right ascension\n    DeltaApp // [11] Sun's apparent declination\n  ]\n}\n\n/*  EQUATION_OF_TIME -- Compute equation of time for a given moment.\n                        Returns the equation of time as a fraction of\n                        a day.  */\n\nfunction equationOfTime (jd: number) {\n  const tau = (jd - J2000) / JulianMillennium\n\n  let L0 =\n    280.4664567 +\n    360007.6982779 * tau +\n    0.03032028 * tau * tau +\n    (tau * tau * tau) / 49931 +\n    -((tau * tau * tau * tau) / 15300) +\n    -((tau * tau * tau * tau * tau) / 2000000)\n\n  L0 = fixAngle(L0)\n\n  const alpha = sunPos(jd)[10]\n  const deltaPsi = nutation(jd)[0]\n  const epsilon = obliqueQ(jd) + nutation(jd)[1]\n\n  let E = L0 + -0.0057183 + -alpha + deltaPsi * dCos(epsilon)\n  E = E - 20.0 * Math.floor(E / 20.0)\n  E = E / (24 * 60)\n\n  return E\n}\n", "import * as unical from 'unical'\n\n//\n// GLOBAL VARIABLES (mostly for DOM elements)\n//\n\n// Global variable for \"Julian day\" value\nlet julianDay: number\n\n// Gregorian date fields\nconst gregYear = document.getElementById('greg-year') as HTMLInputElement\nconst gregMonth = document.getElementById('greg-month') as HTMLSelectElement\nconst gregDay = document.getElementById('greg-day') as HTMLInputElement\nconst gregWeekday = document.getElementById('greg-wday') as HTMLInputElement\nconst gregLeap = document.getElementById('greg-leap') as HTMLInputElement\n\n// Julian date fields\nconst julianYear = document.getElementById('julian-year') as HTMLInputElement\nconst julianMonth = document.getElementById('julian-month') as HTMLSelectElement\nconst julianDate = document.getElementById('julian-cal-day') as HTMLInputElement\nconst julianWeekday = document.getElementById('julian-wday') as HTMLInputElement\nconst julianLeap = document.getElementById('julian-leap') as HTMLInputElement\n\n// Hebrew date fields\nconst hebMonth = document.getElementById('heb-month') as HTMLSelectElement\nconst hebLeap = document.getElementById('heb-leap') as HTMLInputElement\nconst hebYear = document.getElementById('heb-year') as HTMLInputElement\nconst hebDay = document.getElementById('heb-day') as HTMLInputElement\n\n// Islamic date fields\nconst islamicYear = document.getElementById('islamic-year') as HTMLInputElement\nconst islamicMonth = document.getElementById(\n  'islamic-month'\n) as HTMLSelectElement\nconst islamicDay = document.getElementById('islamic-day') as HTMLInputElement\nconst islamicWeekday = document.getElementById(\n  'islamic-wday'\n) as HTMLInputElement\nconst islamicLeap = document.getElementById('islamic-leap') as HTMLInputElement\n\n// Persian date fields\nconst persYear = document.getElementById('pers-year') as HTMLInputElement\nconst persMonth = document.getElementById('pers-month') as HTMLSelectElement\nconst persDay = document.getElementById('pers-day') as HTMLInputElement\nconst persWeekday = document.getElementById('pers-wday') as HTMLInputElement\nconst persLeap = document.getElementById('pers-leap') as HTMLInputElement\n\n//\n// CORE FUNCTIONS\n//\n\n// Much of what follows was adapted from the work of John Walker\n// See his homepage: https://fourmilab.ch/\n\n/*  updateFromGregorian --  Update all calendars from Gregorian.\n                            \"Why not Julian date?\" you ask. Because\n                            starting from Gregorian guarantees we're\n                            already snapped to an integral second, so\n                            we don't get round-off errors in other\n                            calendars.  */\n\nfunction updateFromGregorian () {\n  const year = Number(gregYear.value)\n  const mon = gregMonth.selectedIndex\n  const mDay = Number(gregDay.value)\n\n  // Update Julian day\n\n  const j = unical.gregorianToJD(year, mon + 1, mDay)\n\n  julianDay = j\n\n  // Update day of week in Gregorian box\n\n  const weekday = unical.jWeekday(j)\n  gregWeekday.value = unical.WEEKDAYS[weekday]\n\n  // Update leap year status in Gregorian box\n\n  gregLeap.value = unical.NORM_LEAP[unical.leapGregorian(year) ? 1 : 0]\n\n  // Update Julian Calendar\n\n  const julCal = unical.jdToJulian(j)\n  julianYear.value = String(julCal[0])\n  julianMonth.selectedIndex = julCal[1] - 1\n  julianDate.value = String(julCal[2])\n  julianLeap.value = unical.NORM_LEAP[unical.leapJulian(julCal[0]) ? 1 : 0]\n  julianWeekday.value = unical.WEEKDAYS[weekday]\n\n  // Update Hebrew Calendar\n\n  const hebCal = unical.jdToHebrew(j)\n\n  if (unical.hebrewLeap(hebCal[0])) {\n    hebMonth.options.length = 13\n    hebMonth.options[11] = new Option('Adar I')\n    hebMonth.options[12] = new Option('Veadar')\n  } else {\n    hebMonth.options.length = 12\n    hebMonth.options[11] = new Option('Adar')\n  }\n\n  hebYear.value = String(hebCal[0])\n  hebMonth.selectedIndex = hebCal[1] - 1\n  hebDay.value = String(hebCal[2])\n\n  let hmIndex = hebCal[1]\n  if (hmIndex === 12 && !unical.hebrewLeap(hebCal[0])) {\n    hmIndex = 14\n  }\n\n  switch (unical.hebrewYearDays(hebCal[0])) {\n    case 353: {\n      hebLeap.value = 'Common deficient (353 days)'\n      break\n    }\n\n    case 354: {\n      hebLeap.value = 'Common regular (354 days)'\n      break\n    }\n\n    case 355: {\n      hebLeap.value = 'Common complete (355 days)'\n      break\n    }\n\n    case 383: {\n      hebLeap.value = 'Embolismic deficient (383 days)'\n      break\n    }\n\n    case 384: {\n      hebLeap.value = 'Embolismic regular (384 days)'\n      break\n    }\n\n    case 385: {\n      hebLeap.value = 'Embolismic complete (385 days)'\n      break\n    }\n\n    default:\n      hebLeap.value = `Invalid year length: ${unical.hebrewYearDays(\n        hebCal[0]\n      )} days.`\n      break\n  }\n\n  // Update Islamic Calendar\n\n  const islCal = unical.jdToIslamic(j)\n  islamicYear.value = String(islCal[0])\n  islamicMonth.selectedIndex = islCal[1] - 1\n  islamicDay.value = String(islCal[2])\n  islamicWeekday.value = `Yawm ${unical.ISLAMIC_WEEKDAYS[weekday]}`\n  islamicLeap.value = unical.NORM_LEAP[unical.leapIslamic(islCal[0]) ? 1 : 0]\n\n  // Update Persian Astronomical Calendar\n\n  const persCal = unical.jdToPersianA(j)\n  persYear.value = String(persCal[0])\n  persMonth.selectedIndex = persCal[1] - 1\n  persDay.value = String(persCal[2])\n  persWeekday.value = unical.PERSIAN_WEEKDAYS[weekday]\n  persLeap.value = unical.NORM_LEAP[unical.leapPersianA(persCal[0]) ? 1 : 0]\n}\n\n// calcGregorian -- Perform calculation starting with a Gregorian date\n\nfunction calcGregorian () {\n  updateFromGregorian()\n}\n\n// calcJulian -- Perform calculation starting with a Julian date\n\nfunction calcJulian () {\n  const j = julianDay\n  const date = unical.jdToGregorian(j)\n  gregYear.value = String(date[0])\n  gregMonth.selectedIndex = date[1] - 1\n  gregDay.value = String(date[2])\n  updateFromGregorian()\n}\n\n// setJulian -- Set Julian date and update all calendars\n\nfunction setJulian (j: number) {\n  julianDay = Number(j)\n  calcJulian()\n}\n\n// calcJulianCalendar -- Update from Julian calendar\n\nfunction calcJulianCalendar () {\n  setJulian(\n    unical.julianToJD(\n      Number(julianYear.value),\n      julianMonth.selectedIndex + 1,\n      Number(julianDate.value)\n    )\n  )\n}\n\n// calcHebrew -- Update from Hebrew calendar\n\nfunction calcHebrew () {\n  setJulian(\n    unical.hebrewToJD(\n      Number(hebYear.value),\n      hebMonth.selectedIndex + 1,\n      Number(hebDay.value)\n    )\n  )\n}\n\n// calcIslamic -- Update from Islamic calendar\n\nfunction calcIslamic () {\n  setJulian(\n    unical.islamicToJD(\n      Number(islamicYear.value),\n      islamicMonth.selectedIndex + 1,\n      Number(islamicDay.value)\n    )\n  )\n}\n\n// calcPersianA -- Update from Persian astronomical calendar\n\nfunction calcPersianA () {\n  setJulian(\n    unical.persianAToJD(\n      Number(persYear.value),\n      persMonth.selectedIndex + 1,\n      Number(persDay.value)\n    ) + 0.5\n  )\n}\n\n/*  setDateToToday -- Preset the fields in\n                      the request form to today's date.  */\n\nfunction setDateToToday () {\n  const today = new Date()\n\n  /*  The following idiocy is due to bizarre incompatibilities\n      in the behavior of getYear() between Netscrape and\n      Exploder. The ideal solution is to use getFullYear(),\n      which returns the actual year number, but that would\n      break this code on versions of JavaScript prior to\n      1.2. So, for the moment we use the following code\n      which works for all versions of JavaScript and browsers\n      for all year numbers greater than 1000. When we're willing\n      to require JavaScript 1.2, this may be replaced by\n      the single line:\n\n          document.gregorian.year.value = today.getFullYear();\n\n      Thanks to Larry Gilbert for pointing out this problem.\n    */\n\n  gregYear.value = String(today.getFullYear())\n  gregMonth.selectedIndex = today.getMonth()\n  gregDay.value = String(today.getDate())\n}\n\n//\n// NEW FUNCTIONS\n//\n\n// Function for animal years\nfunction animalCalc () {\n  // Declare a few variables\n  const persYearValue = Number(persYear.value)\n  const persMod = persYearValue % 12\n  const animalAnswer = document.getElementById('animal-answer') as HTMLElement\n  let animalEng = ''\n  let animalOrig = ''\n\n  // Determine animal sign\n  if (persYearValue < 1) {\n    animalAnswer.innerHTML =\n      '<em>No Chinese-Uighur animal sign has been calculated for this date, since the year entered is too early.</em>'\n  } else {\n    if (persMod === 0) {\n      animalEng = 'Snake'\n      animalOrig = 'Yilan'\n    } else if (persMod === 1) {\n      animalEng = 'Horse'\n      animalOrig = 'Yunt'\n    } else if (persMod === 2) {\n      animalEng = 'Goat'\n      animalOrig = 'Quy'\n    } else if (persMod === 3) {\n      animalEng = 'Monkey'\n      animalOrig = 'Pichin'\n    } else if (persMod === 4) {\n      animalEng = 'Rooster'\n      animalOrig = 'Takhaquy'\n    } else if (persMod === 5) {\n      animalEng = 'Dog'\n      animalOrig = 'It'\n    } else if (persMod === 6) {\n      animalEng = 'Pig'\n      animalOrig = 'Tunguz'\n    } else if (persMod === 7) {\n      animalEng = 'Rat'\n      animalOrig = 'Sichqan'\n    } else if (persMod === 8) {\n      animalEng = 'Ox'\n      animalOrig = 'Ud'\n    } else if (persMod === 9) {\n      animalEng = 'Tiger'\n      animalOrig = 'Bars'\n    } else if (persMod === 10) {\n      animalEng = 'Rabbit'\n      animalOrig = 'Tawshqan'\n    } else {\n      animalEng = 'Dragon'\n      animalOrig = 'Luy'\n    }\n\n    // Set result text\n    animalAnswer.innerHTML = `In the Persianate adaptation of the Chinese-Uighur animal calendar, this date falls in a year of the <strong>${animalEng} (<em>${animalOrig}</em>)</strong>.`\n  }\n}\n\nfunction persianImperial () {\n  const persYearValue = Number(persYear.value)\n  const imperialYear = persYearValue + 1180\n\n  const imperialAnswer = document.getElementById(\n    'persian-imperial'\n  ) as HTMLElement\n\n  imperialAnswer.innerHTML = `Using the \u201Cimperial epoch\u201D favored by Mohammad Reza Pahlavi, this is year <strong>${imperialYear}</strong>.`\n}\n\n// Function for Ottoman fiscal years\nfunction ottomanFiscalCalc () {\n  // Hooray for more variables\n  const ottomanFiscalAnswer = document.getElementById(\n    'ottoman-fiscal'\n  ) as HTMLElement\n  const julianYearValue = Number(julianYear.value)\n  const julianMonthIndex = julianMonth.selectedIndex\n  const ottomanFiscalDay = julianDate.value\n\n  // Early out for obviously out-of-scope dates\n  if (julianYearValue < 1840 || julianYearValue > 1916) {\n    ottomanFiscalAnswer.innerHTML =\n      '<em>Ottoman fiscal calendar equivalents will be given for Julian dates between 1840-03-01 and 1916-12-31.</em>'\n    return\n  }\n\n  let ottomanFiscalYear: number\n  let ottomanFiscalMonth: string\n\n  // Set the Ottoman equivalent month\n  if (julianMonthIndex === 0) {\n    ottomanFiscalMonth = 'K\u00E2nun-\u0131 Sani'\n  } else if (julianMonthIndex === 1) {\n    ottomanFiscalMonth = '\u015Eubat'\n  } else if (julianMonthIndex === 2) {\n    ottomanFiscalMonth = 'Mart'\n  } else if (julianMonthIndex === 3) {\n    ottomanFiscalMonth = 'Nisan'\n  } else if (julianMonthIndex === 4) {\n    ottomanFiscalMonth = 'May\u0131s'\n  } else if (julianMonthIndex === 5) {\n    ottomanFiscalMonth = 'Haziran'\n  } else if (julianMonthIndex === 6) {\n    ottomanFiscalMonth = 'Temmuz'\n  } else if (julianMonthIndex === 7) {\n    ottomanFiscalMonth = 'A\u011Fustos'\n  } else if (julianMonthIndex === 8) {\n    ottomanFiscalMonth = 'Eyl\u00FCl'\n  } else if (julianMonthIndex === 9) {\n    ottomanFiscalMonth = 'Te\u015Frin-i Evvel'\n  } else if (julianMonthIndex === 10) {\n    ottomanFiscalMonth = 'Te\u015Frin-i Sani'\n  } else {\n    ottomanFiscalMonth = 'K\u00E2nun-\u0131 Evvel'\n  }\n\n  // The Ottoman fiscal year clicks over as of March\n  // So the difference from the Julian year is 584, except in Jan. and Feb.\n  if (julianMonthIndex > 1) {\n    ottomanFiscalYear = julianYearValue - 584\n  } else {\n    ottomanFiscalYear = julianYearValue - 585\n  }\n\n  // More specifically, we want between 1840-03-01 and 1916-12-31 Julian\n  if (ottomanFiscalYear > 1255 && julianYearValue < 1917) {\n    ottomanFiscalAnswer.innerHTML = `In the Ottoman fiscal calendar, as it was followed from 1840 through 1916 Julian, this date is <strong>${ottomanFiscalDay} ${ottomanFiscalMonth} ${ottomanFiscalYear}</strong>.`\n  } else {\n    ottomanFiscalAnswer.innerHTML =\n      '<em>Ottoman fiscal calendar equivalents will be given for Julian dates between 1840-03-01 and 1916-12-31.</em>'\n  }\n}\n\n// Function for Seleucid era\nfunction seleucidCalc () {\n  // Define variables; calculate result\n  const hebYearValue = Number(hebYear.value)\n  const seleucidYear = hebYearValue - 3449\n  const seleucidAnswer = document.getElementById(\n    'seleucid-answer'\n  ) as HTMLElement\n\n  // Set result text\n  seleucidAnswer.innerHTML = `In the Seleucid era, as used by some medieval Jewish communities, this is year <strong>${seleucidYear}</strong>.`\n}\n\n// Function to show or hide notes text\nfunction toggleNotes () {\n  const notesShowing: boolean =\n    getComputedStyle(document.documentElement).getPropertyValue(\n      '--notes-display'\n    ) === 'block'\n\n  const button = document.getElementById('notes-button') as HTMLButtonElement\n\n  if (notesShowing) {\n    document.documentElement.style.setProperty('--notes-display', 'none')\n    button.innerText = '(show)'\n  } else {\n    document.documentElement.style.setProperty('--notes-display', 'block')\n    button.innerText = '(hide)'\n  }\n}\n\n// Combined function for \"extras\"\nfunction extrasCombined () {\n  animalCalc()\n  persianImperial()\n  ottomanFiscalCalc()\n  seleucidCalc()\n  document.documentElement.style.setProperty('--img-display', 'inline')\n}\n\n// Combined function for \"Today\" button\nfunction todayAndCalc () {\n  setDateToToday()\n  calcGregorian()\n}\n\n//\n// TO RUN ON PAGE LOAD\n//\n\n// On page load, set current date and propagate\n// Also run \"extra\" functions\nwindow.onload = () => {\n  todayAndCalc()\n  extrasCombined()\n}\n\n//\n// EVENT HANDLERS\n//\n\n// Many buttons\nconst gregCalcBtn = document.getElementById('greg-calc-btn')\nconst gregTodayBtn = document.getElementById('greg-today-btn')\nconst julianBtn = document.getElementById('julian-btn')\nconst hebrewBtn = document.getElementById('hebrew-btn')\nconst islamicBtn = document.getElementById('islamic-btn')\nconst persBtn = document.getElementById('pers-btn')\n\n// Click handlers for core functions\ngregCalcBtn?.addEventListener('click', calcGregorian)\ngregTodayBtn?.addEventListener('click', todayAndCalc)\njulianBtn?.addEventListener('click', calcJulianCalendar)\nhebrewBtn?.addEventListener('click', calcHebrew)\nislamicBtn?.addEventListener('click', calcIslamic)\npersBtn?.addEventListener('click', calcPersianA)\n\n// Click handlers for extra functions\ngregCalcBtn?.addEventListener('click', extrasCombined)\ngregTodayBtn?.addEventListener('click', extrasCombined)\njulianBtn?.addEventListener('click', extrasCombined)\nhebrewBtn?.addEventListener('click', extrasCombined)\nislamicBtn?.addEventListener('click', extrasCombined)\npersBtn?.addEventListener('click', extrasCombined)\n\n// Keydown handlers\n// These mimic clicks so that the extra functions will also be triggered\n\ndocument.getElementById('gregorian')?.addEventListener('keydown', (event) => {\n  if (event.key === 'Enter') {\n    gregCalcBtn?.click()\n    ;(document.activeElement as HTMLElement).blur()\n  }\n})\n\ndocument\n  .getElementById('juliancalendar')\n  ?.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      julianBtn?.click()\n      ;(document.activeElement as HTMLElement).blur()\n    }\n  })\n\ndocument.getElementById('hebrew')?.addEventListener('keydown', (event) => {\n  if (event.key === 'Enter') {\n    hebrewBtn?.click()\n    ;(document.activeElement as HTMLElement).blur()\n  }\n})\n\ndocument.getElementById('islamic')?.addEventListener('keydown', (event) => {\n  if (event.key === 'Enter') {\n    islamicBtn?.click()\n    ;(document.activeElement as HTMLElement).blur()\n  }\n})\n\ndocument.getElementById('persiana')?.addEventListener('keydown', (event) => {\n  if (event.key === 'Enter') {\n    persBtn?.click()\n    ;(document.activeElement as HTMLElement).blur()\n  }\n})\n\n// When the text of any input field is changed, clear all check marks\ndocument.querySelectorAll('input').forEach((element) => {\n  element.addEventListener('input', () => {\n    document.documentElement.style.setProperty('--img-display', 'none')\n  })\n})\n\n// When any select field is changed, clear all check marks\ndocument.querySelectorAll('select').forEach((element) => {\n  element.addEventListener('change', () => {\n    document.documentElement.style.setProperty('--img-display', 'none')\n  })\n})\n\n// Listen for clicks on notes field button\ndocument.getElementById('notes-button')?.addEventListener('click', toggleNotes)\n"],
  "mappings": "mBAyCA,IAAMA,EAAY,CAAC,cAAe,WAAW,EAI7C,SAASC,EAAeC,EAAc,CACpC,OAAOA,EAAO,IAAM,GAAK,EAAEA,EAAO,MAAQ,GAAKA,EAAO,MAAQ,EAChE,CAIA,IAAMC,GAAkB,YAExB,SAASC,EAAeF,EAAcG,EAAeC,EAAa,CAChE,OACEH,GACA,EACA,KAAOD,EAAO,GACd,KAAK,OAAOA,EAAO,GAAK,CAAC,EACzB,CAAC,KAAK,OAAOA,EAAO,GAAK,GAAG,EAC5B,KAAK,OAAOA,EAAO,GAAK,GAAG,EAC3B,KAAK,OACF,IAAMG,EAAQ,KAAO,IACnBA,GAAS,EAAI,EAAIJ,EAAcC,CAAI,EAAI,GAAK,IAC7CI,CACJ,CAEJ,CAIA,SAASC,EAAeC,EAAY,CAClC,IAAMC,EAAM,KAAK,MAAMD,EAAK,EAAG,EAAI,GAC7BE,EAASD,EAAMN,GACfQ,EAAa,KAAK,MAAMD,EAAS,MAAM,EACvCE,EAAMC,EAAIH,EAAQ,MAAM,EACxBI,EAAO,KAAK,MAAMF,EAAM,KAAK,EAC7BG,EAAQF,EAAID,EAAK,KAAK,EACtBI,EAAO,KAAK,MAAMD,EAAQ,IAAI,EAC9BE,EAAQJ,EAAIE,EAAO,IAAI,EACvBG,EAAS,KAAK,MAAMD,EAAQ,GAAG,EACjCf,EAAOS,EAAa,IAAMG,EAAO,IAAME,EAAO,EAAIE,EAChDJ,IAAS,GAAKI,IAAW,GAC7BhB,IAEF,IAAMiB,EAAUV,EAAML,EAAcF,EAAM,EAAG,CAAC,EACxCkB,EACJX,EAAML,EAAcF,EAAM,EAAG,CAAC,EAAI,EAAID,EAAcC,CAAI,EAAI,EAAI,EAC5DG,EAAQ,KAAK,QAAQc,EAAUC,GAAW,GAAK,KAAO,GAAG,EACzDd,EAAMG,EAAML,EAAcF,EAAMG,EAAO,CAAC,EAAI,EAElD,MAAO,CAACH,EAAMG,EAAOC,CAAG,CAC1B,CAIA,SAASe,GAAYnB,EAAc,CACjC,OAAOW,EAAIX,EAAM,CAAC,KAAOA,EAAO,EAAI,EAAI,EAC1C,CAEA,SAASoB,GAAYpB,EAAcG,EAAeC,EAAa,CAG7D,OAAIJ,EAAO,GACTA,IAKEG,GAAS,IACXH,IACAG,GAAS,IAIT,KAAK,MAAM,QAAUH,EAAO,KAAK,EACjC,KAAK,MAAM,SAAWG,EAAQ,EAAE,EAChCC,EACA,MAEJ,CAIA,SAASiB,GAAYC,EAAY,CAC/BA,GAAM,GAIN,IAAMC,EAHI,KAAK,MAAMD,CAAE,EAGT,KACRE,EAAI,KAAK,OAAOD,EAAI,OAAS,MAAM,EACnCE,EAAI,KAAK,MAAM,OAASD,CAAC,EACzBE,EAAI,KAAK,OAAOH,EAAIE,GAAK,OAAO,EAEhCtB,EAAQ,KAAK,MAAMuB,EAAI,GAAKA,EAAI,EAAIA,EAAI,EAAE,EAC5C1B,EAAO,KAAK,MAAMG,EAAQ,EAAIqB,EAAI,KAAOA,EAAI,IAAI,EAC/CpB,EAAMmB,EAAIE,EAAI,KAAK,MAAM,QAAUC,CAAC,EAM1C,OAAI1B,EAAO,GACTA,IAGK,CAACA,EAAMG,EAAOC,CAAG,CAC1B,CAIA,IAAMuB,GAAe,SAIrB,SAASC,EAAY5B,EAAc,CACjC,OAAOW,EAAIX,EAAO,EAAI,EAAG,EAAE,EAAI,CACjC,CAIA,SAAS6B,GAAkB7B,EAAc,CACvC,OAAO4B,EAAW5B,CAAI,EAAI,GAAK,EACjC,CAKA,SAAS8B,EAAc9B,EAAc,CACnC,IAAM+B,EAAS,KAAK,OAAO,IAAM/B,EAAO,KAAO,EAAE,EAC3CgC,EAAQ,MAAQ,MAAQD,EAC1B3B,EAAM2B,EAAS,GAAK,KAAK,MAAMC,EAAQ,KAAK,EAEhD,OAAIrB,EAAI,GAAKP,EAAM,GAAI,CAAC,EAAI,GAC1BA,IAEKA,CACT,CAIA,SAAS6B,GAAcjC,EAAc,CACnC,IAAMkC,EAAOJ,EAAa9B,EAAO,CAAC,EAC5BmC,EAAUL,EAAa9B,CAAI,EAGjC,OAFa8B,EAAa9B,EAAO,CAAC,EAEpBmC,IAAY,IAAM,EAAIA,EAAUD,IAAS,IAAM,EAAI,CACnE,CAIA,SAASE,EAAgBpC,EAAc,CACrC,OAAOqC,EAAWrC,EAAO,EAAG,EAAG,CAAC,EAAIqC,EAAWrC,EAAM,EAAG,CAAC,CAC3D,CAIA,SAASsC,EAAiBtC,EAAcG,EAAe,CA2BrD,OAvBEA,IAAU,GACVA,IAAU,GACVA,IAAU,GACVA,IAAU,IACVA,IAAU,IAORA,IAAU,IAAM,CAACyB,EAAW5B,CAAI,GAMhCG,IAAU,GAAKQ,EAAIyB,EAAepC,CAAI,EAAG,EAAE,IAAM,GAMjDG,IAAU,GAAKQ,EAAIyB,EAAepC,CAAI,EAAG,EAAE,IAAM,EAC5C,GAKF,EACT,CAIA,SAASqC,EAAYrC,EAAcG,EAAeC,EAAa,CAC7D,IAAM2B,EAASF,GAAiB7B,CAAI,EAChCM,EAAKqB,GAAeG,EAAa9B,CAAI,EAAIiC,GAAajC,CAAI,EAAII,EAAM,EACpEmC,EAEJ,GAAIpC,EAAQ,EAAG,CACb,IAAKoC,EAAM,EAAGA,GAAOR,EAAQQ,IAC3BjC,GAAMgC,EAAgBtC,EAAMuC,CAAG,EAEjC,IAAKA,EAAM,EAAGA,EAAMpC,EAAOoC,IACzBjC,GAAMgC,EAAgBtC,EAAMuC,CAAG,MAGjC,KAAKA,EAAM,EAAGA,EAAMpC,EAAOoC,IACzBjC,GAAMgC,EAAgBtC,EAAMuC,CAAG,EAInC,OAAOjC,CACT,CAOA,SAASkC,GAAYlC,EAAY,CAC/B,IAAImC,EAEJnC,EAAK,KAAK,MAAMA,CAAE,EAAI,GACtB,IAAMoC,EAAQ,KAAK,OAAQpC,EAAKqB,IAAgB,MAAW,QAAU,EACjE3B,EAAO0C,EAAQ,EACnB,IAAKD,EAAIC,EAAOpC,GAAM+B,EAAWI,EAAG,EAAG,CAAC,EAAGA,IACzCzC,IAEF,IAAM2C,EAAQrC,EAAK+B,EAAWrC,EAAM,EAAG,CAAC,EAAI,EAAI,EAC5CG,EAAQwC,EACZ,IAAKF,EAAIE,EAAOrC,EAAK+B,EAAWrC,EAAMyC,EAAGH,EAAgBtC,EAAMyC,CAAC,CAAC,EAAGA,IAClEtC,IAEF,IAAMC,EAAME,EAAK+B,EAAWrC,EAAMG,EAAO,CAAC,EAAI,EAC9C,MAAO,CAACH,EAAMG,EAAOC,CAAG,CAC1B,CAIA,SAASwC,GAAa5C,EAAc,CAClC,OAAQA,EAAO,GAAK,IAAM,GAAK,EACjC,CAIA,IAAM6C,GAAgB,YAChBC,GAAmB,CACvB,UACA,aACA,oBACA,uBACA,YACA,iBACA,SACF,EAEA,SAASC,EAAa/C,EAAcG,EAAeC,EAAa,CAC9D,OACEA,EACA,KAAK,KAAK,MAAQD,EAAQ,EAAE,GAC3BH,EAAO,GAAK,IACb,KAAK,OAAO,EAAI,GAAKA,GAAQ,EAAE,EAC/B6C,GACA,CAEJ,CAIA,SAASG,GAAa1C,EAAY,CAChCA,EAAK,KAAK,MAAMA,CAAE,EAAI,GACtB,IAAMN,EAAO,KAAK,OAAO,IAAMM,EAAKuC,IAAiB,OAAS,KAAK,EAC7D1C,EAAQ,KAAK,IACjB,GACA,KAAK,MAAMG,GAAM,GAAKyC,EAAY/C,EAAM,EAAG,CAAC,IAAM,IAAI,EAAI,CAC5D,EACMI,EAAME,EAAKyC,EAAY/C,EAAMG,EAAO,CAAC,EAAI,EAC/C,MAAO,CAACH,EAAMG,EAAOC,CAAG,CAC1B,CAMA,SAAS6C,GAAejD,EAAc,CAEpC,IAAMkD,EAASC,GAAQnD,EAAM,CAAC,EAMxBoD,EAHQF,EAASG,GAAOrD,CAAI,GAAK,GAAK,GAAK,IAG1BsD,GAAeJ,CAAM,EAMtCK,GAAY,GAAK,GAAK,GAAO,GAAK,GAAO,KAAS,IAGxD,OAFkBH,EAASG,CAG7B,CAOA,SAASC,EAAiBxD,EAAc,CACtC,IAAMyD,EAAKR,GAAcjD,CAAI,EAG7B,OAFY,KAAK,MAAMyD,CAAE,CAG3B,CAYA,IAAMC,GAAgB,YAChBC,GAAmB,CACvB,aACA,YACA,aACA,gBACA,cACA,cACA,SACF,EAEA,SAASC,GAActD,EAAY,CACjC,IAAIuD,EAAQxD,EAAcC,CAAE,EAAE,CAAC,EAAI,EAE/BwD,EAASN,EAAgBK,CAAK,EAClC,KAAOC,EAASxD,GACduD,IACAC,EAASN,EAAgBK,CAAK,EAGhC,IAAIE,EAASD,EAAS,EACtB,KAAO,EAAEA,GAAUxD,GAAMA,EAAKyD,IAC5BD,EAASC,EACTF,IACAE,EAASP,EAAgBK,CAAK,EAKhC,MAAO,CAFK,KAAK,OAAOC,EAASJ,IAAiBM,CAAY,EAAI,EAErDF,CAAM,CACrB,CAKA,SAASG,GAAc3D,EAAY,CACjCA,EAAK,KAAK,MAAMA,CAAE,EAAI,GACtB,IAAM4D,EAAMN,GAAatD,CAAE,EACrBN,EAAOkE,EAAI,CAAC,EACZf,EAAUe,EAAI,CAAC,EACjB9D,EAAM,KAAK,OAAOE,EAAK6C,GAAW,EAAE,EAAI,EAEtCgB,EAAO,KAAK,MAAM7D,CAAE,EAAI8D,EAAapE,EAAM,EAAG,CAAC,EAAI,EACnDG,EAAQgE,GAAQ,IAAM,KAAK,KAAKA,EAAO,EAAE,EAAI,KAAK,MAAMA,EAAO,GAAK,EAAE,EAC5E,OAAA/D,EAAM,KAAK,MAAME,CAAE,EAAI8D,EAAapE,EAAMG,EAAO,CAAC,EAAI,EAE/C,CAACH,EAAMG,EAAOC,CAAG,CAC1B,CAKA,SAASgE,EAAcpE,EAAcG,EAAeC,EAAa,CAC/D,IAAIyD,EAAQH,GAAgB,EAAIM,GAAgBhE,EAAO,EAAI,GACvDkE,EAAM,CAAClE,EAAO,EAAG,CAAC,EAEtB,KAAOkE,EAAI,CAAC,EAAIlE,GACdkE,EAAMN,GAAaC,CAAK,EACxBA,EAAQK,EAAI,CAAC,GAAKF,EAAe,GAMnC,OAJgBE,EAAI,CAAC,GAGR/D,GAAS,GAAKA,EAAQ,GAAK,IAAMA,EAAQ,GAAK,GAAK,IAAMC,EAAM,EAE9E,CAKA,SAASiE,GAAcrE,EAAc,CACnC,OAAOoE,EAAapE,EAAO,EAAG,EAAG,CAAC,EAAIoE,EAAapE,EAAM,EAAG,CAAC,EAAI,GACnE,CAaA,IAAMsE,EAAQ,QACRC,EAAgB,MAChBC,GAAmBD,EAAgB,GAEnCP,EAAe,aAIrB,SAASS,EAAKhD,EAAW,CACvB,OAAQA,EAAI,KAAK,GAAM,GACzB,CAIA,SAASiD,EAAKC,EAAW,CACvB,OAAQA,EAAI,IAAS,KAAK,EAC5B,CAIA,SAASC,EAAUC,EAAW,CAC5B,OAAOA,EAAI,IAAQ,KAAK,MAAMA,EAAI,GAAK,CACzC,CAIA,SAASC,GAASD,EAAW,CAC3B,OAAOA,EAAI,EAAI,KAAK,GAAK,KAAK,MAAMA,GAAK,EAAI,KAAK,GAAG,CACvD,CAIA,SAASE,EAAMtD,EAAW,CACxB,OAAO,KAAK,IAAIgD,EAAIhD,CAAC,CAAC,CACxB,CAIA,SAASuD,EAAMvD,EAAW,CACxB,OAAO,KAAK,IAAIgD,EAAIhD,CAAC,CAAC,CACxB,CAIA,SAASd,EAAKkE,EAAWtD,EAAW,CAClC,OAAOsD,EAAItD,EAAI,KAAK,MAAMsD,EAAItD,CAAC,CACjC,CAIA,SAAS0D,GAAUC,EAAW,CAC5B,OAAOvE,EAAI,KAAK,MAAMuE,EAAI,GAAG,EAAG,CAAC,CACnC,CAEA,IAAMC,EAAW,CACf,SACA,SACA,UACA,YACA,WACA,SACA,UACF,EAaMC,GAAS,CACb,SAAU,MAAO,QAAS,OAAQ,QAAS,OAAQ,KAAM,MAAO,KAAM,IACxE,EAEA,SAASC,GAAU/E,EAAY,CAC7B,IAAMgF,GAAKhF,EAAKgE,IAAUC,EAAgB,KACtCgB,EAAID,EAEJE,EAAM,GAAK,GAAK,GAAO,OAAS,KAEpC,GAAI,KAAK,IAAIF,CAAC,EAAI,EAChB,QAAS7C,EAAI,EAAGA,EAAI,GAAIA,IACtB+C,GAAQJ,GAAO3C,CAAC,EAAI,KAAU8C,EAC9BA,GAAKD,EAIT,OAAOE,CACT,CAMA,IAAMC,GAAa,CACjzE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAC3E,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAC5E,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC1E,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3E,GAAI,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAC1E,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC5E,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAC1E,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,CACjD,EAEMC,EAAc,CAClB,QAAS,MAAO,MAAO,GAAI,OAAQ,IAAK,KAAM,IAAK,MAAO,GAAI,IAAK,GAAI,KACvE,EAAG,KAAM,EAAG,KAAM,IAAK,GAAI,GAAI,IAAK,EAAG,GAAI,EAAG,KAAM,GAAI,IAAK,GAAI,KAAM,GACvE,IAAK,EAAG,KAAM,EAAG,IAAK,GAAI,IAAK,GAAI,IAAK,EAAG,KAAM,EAAG,EAAG,EAAG,IAAK,EAAG,IAAK,EAAG,IAC1E,EAAG,IAAK,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,IAAK,EAAG,IAAK,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,IAAK,EAC3E,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,IAAK,EAAG,IAAK,EAAG,GAAI,EAAG,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,EAC3E,GAAI,EAAG,IAAK,EAAG,GAAI,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,GAAI,EAAG,IAAK,EAAG,GAAI,GAAI,EAAG,EAAG,GAAI,EAC3E,GAAI,EAAG,IAAK,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EACzE,IAAK,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAC5E,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACzE,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3E,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GACzE,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,CAC5D,EAOA,SAASC,GAAUrF,EAAY,CAC7B,IAAMsF,GAAKtF,EAAK,SAAa,MACvBuF,EAAK,KAAK,IAAID,EAAG,CAAC,EAClBE,EAAK,KAAK,IAAIF,EAAG,CAAC,EAClBG,EAAK,CAAC,EACRC,EAAK,EACLC,EAAK,EASTF,EAAG,CAAC,EAAItB,EAAI,WAAa,aAAemB,EAAI,SAAYC,EAAKC,EAAK,MAAQ,EAC1EC,EAAG,CAAC,EAAItB,EAAI,UAAY,YAAcmB,EAAI,QAAYC,EAAKC,EAAK,GAAQ,EACxEC,EAAG,CAAC,EAAItB,EAAI,UAAY,cAAgBmB,EAAI,SAAYC,EAAKC,EAAK,KAAO,EACzEC,EAAG,CAAC,EAAItB,EAAI,SAAW,cAAgBmB,EAAI,SAAYC,EAAKC,EAAK,MAAM,EACvEC,EAAG,CAAC,EAAItB,EAAI,UAAY,YAAcmB,EAAI,SAAYC,EAAKC,EAAK,IAAQ,EAKxE,QAASrD,EAAI,EAAGA,EAAI,EAAGA,IACrBsD,EAAGtD,CAAC,EAAIqC,GAAQiB,EAAGtD,CAAC,CAAC,EAGvB,IAAMyD,EAAON,EAAI,GAEjB,QAASnD,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,IAAI0D,EAAM,EACV,QAASjB,EAAI,EAAGA,EAAI,EAAGA,IACjBO,GAAWhD,EAAI,EAAIyC,CAAC,IAAM,IAC5BiB,GAAOV,GAAWhD,EAAI,EAAIyC,CAAC,EAAIa,EAAGb,CAAC,GAGvCc,IACGN,EAAYjD,EAAI,EAAI,CAAC,EAAIiD,EAAYjD,EAAI,EAAI,CAAC,EAAIyD,GAAQ,KAAK,IAAIC,CAAG,EACzEF,IACGP,EAAYjD,EAAI,EAAI,CAAC,EAAIiD,EAAYjD,EAAI,EAAI,CAAC,EAAIyD,GAAQ,KAAK,IAAIC,CAAG,EAM3E,IAAMC,EAAWJ,GAAM,KAAS,KAC1BK,EAAeJ,GAAM,KAAS,KAEpC,MAAO,CAACG,EAAUC,CAAY,CAChC,CAQA,IAAMC,EAAY,CAChB,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC3E,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3E,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC3E,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACxE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAM,KAAM,KAAM,GAAI,GAAI,GAAI,GAAI,GAAI,GAC1E,KAAM,KAAM,GAAI,KAAM,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACxE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAI,KAAM,KAAM,KAAM,KAAM,KAAM,IACtE,IAAK,IAAK,IAAK,KAAM,KAAM,GAAI,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GACzE,KAAM,KAAM,KAAM,GAAI,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAI,KAAM,KACpE,KAAM,KAAM,GAAI,GAAI,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACpE,KAAM,KAAM,KAAM,KAAM,KAAM,GAAI,KAAM,GAAI,GAAI,IAClD,EAEA,SAASjD,GAAQrD,EAAc,CAC7B,IAAIuG,EAEJ,GAAIvG,GAAQ,MAAQA,GAAQ,IAAM,CAChC,IAAMyC,EAAI,KAAK,OAAOzC,EAAO,MAAQ,CAAC,EAChCwG,GAAKxG,EAAO,MAAQ,EAAIyC,EAC9B8D,EAAKD,EAAU7D,CAAC,GAAK6D,EAAU7D,EAAI,CAAC,EAAI6D,EAAU7D,CAAC,GAAK+D,MACnD,CACL,IAAM,GAAKxG,EAAO,KAAQ,IACtBA,EAAO,IACTuG,EAAK,KAAO,IAAM,EAAI,KAAO,EAAI,GAEjCA,EAAK,IAAM,IAAM,EAAI,KAAO,EAAI,EAC5BvG,EAAO,KAAQA,EAAO,OACxBuG,GAAM,KAAQvG,EAAO,QAI3B,OAAOuG,CACT,CAcA,IAAME,EAAgB,CACpB,IAAK,OAAQ,SAAU,IAAK,OAAQ,UAAW,IAAK,OAAQ,OAAQ,IACpE,MAAO,WAAY,IAAK,MAAO,UAAW,IAAK,OAAQ,UAAW,GAAI,OACtE,UAAW,GAAI,OAAQ,SAAU,GAAI,OAAQ,SAAU,GAAI,OAAQ,UACnE,GAAI,OAAQ,QAAS,GAAI,MAAO,SAAU,GAAI,OAAQ,UAAW,GAAI,OACrE,UAAW,GAAI,MAAO,SAAU,GAAI,OAAQ,UAAW,GAAI,OAAQ,SACnE,GAAI,OAAQ,UAAW,GAAI,OAAQ,UAAW,GAAI,MAAO,UAAW,GACpE,OAAQ,UAAW,GAAI,OAAQ,UAAW,EAAG,OAAQ,SAAU,EAAG,MAClE,SACF,EAEMC,GAAc,CAClB,CAAC,gBAAe,YAAa,OAAS,OAAS,MAAQ,EACvD,CAAC,gBAAe,aAAc,QAAU,OAAS,KAAO,EACxD,CAAC,gBAAe,aAAc,QAAU,QAAU,KAAO,EACzD,CAAC,gBAAe,aAAc,QAAU,QAAU,KAAQ,CAC5D,EAEMC,GAAc,CAClB,CAAC,gBAAe,aAAc,OAAS,QAAU,MAAQ,EACzD,CAAC,gBAAe,aAAc,OAAS,OAAS,KAAO,EACvD,CAAC,gBAAe,aAAc,QAAU,OAAS,KAAO,EACxD,CAAC,gBAAe,aAAc,QAAU,QAAU,KAAO,CAC3D,EAEA,SAASxD,GAASnD,EAAc4G,EAAe,CAC7C,IAAIC,EACAC,EAMA9G,EAAO,KACT6G,EAAUH,GACVI,EAAI9G,EAAO,MAEX6G,EAAUF,GACVG,GAAK9G,EAAO,KAAQ,KAGtB,IAAM+G,EACJF,EAAQD,CAAK,EAAE,CAAC,EAChBC,EAAQD,CAAK,EAAE,CAAC,EAAIE,EACpBD,EAAQD,CAAK,EAAE,CAAC,EAAIE,EAAIA,EACxBD,EAAQD,CAAK,EAAE,CAAC,EAAIE,EAAIA,EAAIA,EAC5BD,EAAQD,CAAK,EAAE,CAAC,EAAIE,EAAIA,EAAIA,EAAIA,EAE5BE,GAAKD,EAAO,SAAa,MACzBE,EAAI,UAAYD,EAAI,KACpBE,EAAS,EAAI,MAASlC,EAAKiC,CAAC,EAAI,KAASjC,EAAK,EAAIiC,CAAC,EAIrDE,EAAI,EACR,QAAS1E,EAAI,EAAGyC,EAAI,EAAGzC,EAAI,GAAIA,IAC7B0E,GACEV,EAAcvB,CAAC,EAAIF,EAAKyB,EAAcvB,EAAI,CAAC,EAAIuB,EAAcvB,EAAI,CAAC,EAAI8B,CAAC,EACzE9B,GAAK,EAKP,OAFY6B,EAAQI,EAAI,KAAWD,CAGrC,CAQA,SAASE,GAAQ9G,EAAY,CAC3B,IAAM0G,GAAK1G,EAAKgE,GAASC,EACnB8C,EAAKL,EAAIA,EAEXM,EAAK,UAAY,YAAcN,EAAI,QAAYK,EACnDC,EAAK1C,EAAS0C,CAAE,EAEhB,IAAIC,EAAI,UAAY,YAAcP,EAAI,SAAaK,EACnDE,EAAI3C,EAAS2C,CAAC,EAEd,IAAM7F,EAAI,WAAc,UAAesF,EAAI,UAAgBK,EAErDG,GACH,SAAW,SAAYR,EAAI,OAAYK,GAAMtC,EAAKwC,CAAC,GACnD,QAAW,OAAWP,GAAKjC,EAAK,EAAIwC,CAAC,EACtC,OAAWxC,EAAK,EAAIwC,CAAC,EAEjBE,EAAUH,EAAKE,EACfE,EAAaH,EAAIC,EACjBG,EAAQ,aAAe,EAAIjG,EAAIA,IAAO,EAAIA,EAAIsD,EAAK0C,CAAU,GAC7DE,EAAQ,OAAS,SAAWZ,EAC5Ba,EAASJ,EAAU,QAAW,QAAW1C,EAAK6C,CAAK,EACnDE,EAAWzC,GAAS/E,CAAE,EACtByH,EAAUD,EAAW,OAAU9C,EAAK4C,CAAK,EAE3CI,EAAQtD,EAAI,KAAK,MAAMM,EAAK8C,CAAQ,EAAI/C,EAAK0C,CAAO,EAAGzC,EAAKyC,CAAO,CAAC,CAAC,EACzEO,EAAQpD,EAASoD,CAAK,EAEtB,IAAMC,GAAQvD,EAAI,KAAK,KAAKK,EAAK+C,CAAQ,EAAI/C,EAAK0C,CAAO,CAAC,CAAC,EAEvDS,EAAWxD,EAAI,KAAK,MAAMM,EAAK+C,CAAO,EAAIhD,EAAK8C,CAAM,EAAG7C,EAAK6C,CAAM,CAAC,CAAC,EACzEK,EAAWtD,EAASsD,CAAQ,EAE5B,IAAMC,GAAWzD,EAAI,KAAK,KAAKK,EAAKgD,CAAO,EAAIhD,EAAK8C,CAAM,CAAC,CAAC,EAE5D,MAAO,CAELP,EACAC,EACA7F,EACA8F,EACAC,EACAC,EACAC,EACAE,EACAG,EACAC,GACAC,EACAC,EACF,CACF,CAMA,SAAS7E,GAAgBhD,EAAY,CACnC,IAAM8H,GAAO9H,EAAKgE,GAASE,GAEvB8C,EACF,YACA,eAAiBc,EACjB,UAAaA,EAAMA,EAClBA,EAAMA,EAAMA,EAAO,MACpB,EAAGA,EAAMA,EAAMA,EAAMA,EAAO,OAC5B,EAAGA,EAAMA,EAAMA,EAAMA,EAAMA,EAAO,KAEpCd,EAAK1C,EAAS0C,CAAE,EAEhB,IAAMe,EAAQjB,GAAO9G,CAAE,EAAE,EAAE,EACrB8F,EAAWT,GAASrF,CAAE,EAAE,CAAC,EACzByH,EAAU1C,GAAS/E,CAAE,EAAIqF,GAASrF,CAAE,EAAE,CAAC,EAEzCgI,EAAIhB,EAAK,UAAa,CAACe,EAAQjC,EAAWpB,EAAK+C,CAAO,EAC1D,OAAAO,EAAIA,EAAI,GAAO,KAAK,MAAMA,EAAI,EAAI,EAClCA,EAAIA,GAAK,GAAK,IAEPA,CACT,CCr0BA,IAAIC,EAGEC,EAAW,SAAS,eAAe,WAAW,EAC9CC,EAAY,SAAS,eAAe,YAAY,EAChDC,EAAU,SAAS,eAAe,UAAU,EAC5CC,GAAc,SAAS,eAAe,WAAW,EACjDC,GAAW,SAAS,eAAe,WAAW,EAG9CC,EAAa,SAAS,eAAe,aAAa,EAClDC,EAAc,SAAS,eAAe,cAAc,EACpDC,EAAa,SAAS,eAAe,gBAAgB,EACrDC,GAAgB,SAAS,eAAe,aAAa,EACrDC,GAAa,SAAS,eAAe,aAAa,EAGlDC,EAAW,SAAS,eAAe,WAAW,EAC9CC,EAAU,SAAS,eAAe,UAAU,EAC5CC,EAAU,SAAS,eAAe,UAAU,EAC5CC,GAAS,SAAS,eAAe,SAAS,EAG1CC,GAAc,SAAS,eAAe,cAAc,EACpDC,GAAe,SAAS,eAC5B,eACF,EACMC,GAAa,SAAS,eAAe,aAAa,EAClDC,GAAiB,SAAS,eAC9B,cACF,EACMC,GAAc,SAAS,eAAe,cAAc,EAGpDC,EAAW,SAAS,eAAe,WAAW,EAC9CC,GAAY,SAAS,eAAe,YAAY,EAChDC,GAAU,SAAS,eAAe,UAAU,EAC5CC,GAAc,SAAS,eAAe,WAAW,EACjDC,GAAW,SAAS,eAAe,WAAW,EAgBpD,SAASC,IAAuB,CAC9B,IAAMC,EAAO,OAAOzB,EAAS,KAAK,EAC5B0B,EAAMzB,EAAU,cAChB0B,EAAO,OAAOzB,EAAQ,KAAK,EAI3B0B,EAAWC,EAAcJ,EAAMC,EAAM,EAAGC,CAAI,EAElD5B,EAAY6B,EAIZ,IAAME,EAAiBC,GAASH,CAAC,EACjCzB,GAAY,MAAe6B,EAASF,CAAO,EAI3C1B,GAAS,MAAe6B,EAAiBC,EAAcT,CAAI,EAAI,EAAI,CAAC,EAIpE,IAAMU,EAAgBC,GAAWR,CAAC,EAClCvB,EAAW,MAAQ,OAAO8B,EAAO,CAAC,CAAC,EACnC7B,EAAY,cAAgB6B,EAAO,CAAC,EAAI,EACxC5B,EAAW,MAAQ,OAAO4B,EAAO,CAAC,CAAC,EACnC1B,GAAW,MAAewB,EAAiBI,GAAWF,EAAO,CAAC,CAAC,EAAI,EAAI,CAAC,EACxE3B,GAAc,MAAewB,EAASF,CAAO,EAI7C,IAAMQ,EAAgBC,GAAWX,CAAC,EAEvBY,EAAWF,EAAO,CAAC,CAAC,GAC7B5B,EAAS,QAAQ,OAAS,GAC1BA,EAAS,QAAQ,EAAE,EAAI,IAAI,OAAO,QAAQ,EAC1CA,EAAS,QAAQ,EAAE,EAAI,IAAI,OAAO,QAAQ,IAE1CA,EAAS,QAAQ,OAAS,GAC1BA,EAAS,QAAQ,EAAE,EAAI,IAAI,OAAO,MAAM,GAG1CE,EAAQ,MAAQ,OAAO0B,EAAO,CAAC,CAAC,EAChC5B,EAAS,cAAgB4B,EAAO,CAAC,EAAI,EACrCzB,GAAO,MAAQ,OAAOyB,EAAO,CAAC,CAAC,EAE/B,IAAIG,EAAUH,EAAO,CAAC,EAKtB,OAJIG,IAAY,IAAM,CAAQD,EAAWF,EAAO,CAAC,CAAC,IAChDG,EAAU,IAGGC,EAAeJ,EAAO,CAAC,CAAC,EAAG,CACxC,IAAK,KAAK,CACR3B,EAAQ,MAAQ,8BAChB,KACF,CAEA,IAAK,KAAK,CACRA,EAAQ,MAAQ,4BAChB,KACF,CAEA,IAAK,KAAK,CACRA,EAAQ,MAAQ,6BAChB,KACF,CAEA,IAAK,KAAK,CACRA,EAAQ,MAAQ,kCAChB,KACF,CAEA,IAAK,KAAK,CACRA,EAAQ,MAAQ,gCAChB,KACF,CAEA,IAAK,KAAK,CACRA,EAAQ,MAAQ,iCAChB,KACF,CAEA,QACEA,EAAQ,MAAQ,wBAA+B+B,EAC7CJ,EAAO,CAAC,CACV,UACA,KACJ,CAIA,IAAMK,EAAgBC,GAAYhB,CAAC,EACnCd,GAAY,MAAQ,OAAO6B,EAAO,CAAC,CAAC,EACpC5B,GAAa,cAAgB4B,EAAO,CAAC,EAAI,EACzC3B,GAAW,MAAQ,OAAO2B,EAAO,CAAC,CAAC,EACnC1B,GAAe,MAAQ,QAAe4B,GAAiBf,CAAO,IAC9DZ,GAAY,MAAee,EAAiBa,GAAYH,EAAO,CAAC,CAAC,EAAI,EAAI,CAAC,EAI1E,IAAMI,EAAiBC,GAAapB,CAAC,EACrCT,EAAS,MAAQ,OAAO4B,EAAQ,CAAC,CAAC,EAClC3B,GAAU,cAAgB2B,EAAQ,CAAC,EAAI,EACvC1B,GAAQ,MAAQ,OAAO0B,EAAQ,CAAC,CAAC,EACjCzB,GAAY,MAAe2B,GAAiBnB,CAAO,EACnDP,GAAS,MAAeU,EAAiBiB,GAAaH,EAAQ,CAAC,CAAC,EAAI,EAAI,CAAC,CAC3E,CAIA,SAASI,IAAiB,CACxB3B,GAAoB,CACtB,CAIA,SAAS4B,IAAc,CAErB,IAAMC,EAAcC,EADVvD,CACyB,EACnCC,EAAS,MAAQ,OAAOqD,EAAK,CAAC,CAAC,EAC/BpD,EAAU,cAAgBoD,EAAK,CAAC,EAAI,EACpCnD,EAAQ,MAAQ,OAAOmD,EAAK,CAAC,CAAC,EAC9B7B,GAAoB,CACtB,CAIA,SAAS+B,EAAW3B,EAAW,CAC7B7B,EAAY,OAAO6B,CAAC,EACpBwB,GAAW,CACb,CAIA,SAASI,IAAsB,CAC7BD,EACSE,GACL,OAAOpD,EAAW,KAAK,EACvBC,EAAY,cAAgB,EAC5B,OAAOC,EAAW,KAAK,CACzB,CACF,CACF,CAIA,SAASmD,IAAc,CACrBH,EACSI,EACL,OAAO/C,EAAQ,KAAK,EACpBF,EAAS,cAAgB,EACzB,OAAOG,GAAO,KAAK,CACrB,CACF,CACF,CAIA,SAAS+C,IAAe,CACtBL,EACSM,EACL,OAAO/C,GAAY,KAAK,EACxBC,GAAa,cAAgB,EAC7B,OAAOC,GAAW,KAAK,CACzB,CACF,CACF,CAIA,SAAS8C,IAAgB,CACvBP,EACSQ,EACL,OAAO5C,EAAS,KAAK,EACrBC,GAAU,cAAgB,EAC1B,OAAOC,GAAQ,KAAK,CACtB,EAAI,EACN,CACF,CAKA,SAAS2C,IAAkB,CACzB,IAAMC,EAAQ,IAAI,KAkBlBjE,EAAS,MAAQ,OAAOiE,EAAM,YAAY,CAAC,EAC3ChE,EAAU,cAAgBgE,EAAM,SAAS,EACzC/D,EAAQ,MAAQ,OAAO+D,EAAM,QAAQ,CAAC,CACxC,CAOA,SAASC,IAAc,CAErB,IAAMC,EAAgB,OAAOhD,EAAS,KAAK,EACrCiD,EAAUD,EAAgB,GAC1BE,EAAe,SAAS,eAAe,eAAe,EACxDC,EAAY,GACZC,EAAa,GAGbJ,EAAgB,EAClBE,EAAa,UACX,kHAEED,IAAY,GACdE,EAAY,QACZC,EAAa,SACJH,IAAY,GACrBE,EAAY,QACZC,EAAa,QACJH,IAAY,GACrBE,EAAY,OACZC,EAAa,OACJH,IAAY,GACrBE,EAAY,SACZC,EAAa,UACJH,IAAY,GACrBE,EAAY,UACZC,EAAa,YACJH,IAAY,GACrBE,EAAY,MACZC,EAAa,MACJH,IAAY,GACrBE,EAAY,MACZC,EAAa,UACJH,IAAY,GACrBE,EAAY,MACZC,EAAa,WACJH,IAAY,GACrBE,EAAY,KACZC,EAAa,MACJH,IAAY,GACrBE,EAAY,QACZC,EAAa,QACJH,IAAY,IACrBE,EAAY,SACZC,EAAa,aAEbD,EAAY,SACZC,EAAa,OAIfF,EAAa,UAAY,gHAAgHC,UAAkBC,oBAE/J,CAEA,SAASC,IAAmB,CAE1B,IAAMC,EADgB,OAAOtD,EAAS,KAAK,EACN,KAE/BuD,EAAiB,SAAS,eAC9B,kBACF,EAEAA,EAAe,UAAY,+FAAqFD,aAClH,CAGA,SAASE,IAAqB,CAE5B,IAAMC,EAAsB,SAAS,eACnC,gBACF,EACMC,EAAkB,OAAOxE,EAAW,KAAK,EACzCyE,EAAmBxE,EAAY,cAC/ByE,EAAmBxE,EAAW,MAGpC,GAAIsE,EAAkB,MAAQA,EAAkB,KAAM,CACpDD,EAAoB,UAClB,iHACF,OAGF,IAAII,EACAC,EAGAH,IAAqB,EACvBG,EAAqB,uBACZH,IAAqB,EAC9BG,EAAqB,aACZH,IAAqB,EAC9BG,EAAqB,OACZH,IAAqB,EAC9BG,EAAqB,QACZH,IAAqB,EAC9BG,EAAqB,aACZH,IAAqB,EAC9BG,EAAqB,UACZH,IAAqB,EAC9BG,EAAqB,SACZH,IAAqB,EAC9BG,EAAqB,eACZH,IAAqB,EAC9BG,EAAqB,WACZH,IAAqB,EAC9BG,EAAqB,sBACZH,IAAqB,GAC9BG,EAAqB,qBAErBA,EAAqB,wBAKnBH,EAAmB,EACrBE,EAAoBH,EAAkB,IAEtCG,EAAoBH,EAAkB,IAIpCG,EAAoB,MAAQH,EAAkB,KAChDD,EAAoB,UAAY,0GAA0GG,KAAoBE,KAAsBD,cAEpLJ,EAAoB,UAClB,gHAEN,CAGA,SAASM,IAAgB,CAGvB,IAAMC,EADe,OAAOvE,EAAQ,KAAK,EACL,KAC9BwE,EAAiB,SAAS,eAC9B,iBACF,EAGAA,EAAe,UAAY,0FAA0FD,aACvH,CAGA,SAASE,IAAe,CACtB,IAAMC,EACJ,iBAAiB,SAAS,eAAe,EAAE,iBACzC,iBACF,IAAM,QAEFC,EAAS,SAAS,eAAe,cAAc,EAEjDD,GACF,SAAS,gBAAgB,MAAM,YAAY,kBAAmB,MAAM,EACpEC,EAAO,UAAY,WAEnB,SAAS,gBAAgB,MAAM,YAAY,kBAAmB,OAAO,EACrEA,EAAO,UAAY,SAEvB,CAGA,SAASC,GAAkB,CACzBtB,GAAW,EACXM,GAAgB,EAChBG,GAAkB,EAClBO,GAAa,EACb,SAAS,gBAAgB,MAAM,YAAY,gBAAiB,QAAQ,CACtE,CAGA,SAASO,IAAgB,CACvBzB,GAAe,EACfb,GAAc,CAChB,CAQA,OAAO,OAAS,IAAM,CACpBsC,GAAa,EACbD,EAAe,CACjB,EAOA,IAAME,GAAc,SAAS,eAAe,eAAe,EACrDC,GAAe,SAAS,eAAe,gBAAgB,EACvDC,GAAY,SAAS,eAAe,YAAY,EAChDC,GAAY,SAAS,eAAe,YAAY,EAChDC,GAAa,SAAS,eAAe,aAAa,EAClDC,GAAU,SAAS,eAAe,UAAU,EAGlDL,IAAa,iBAAiB,QAASvC,EAAa,EACpDwC,IAAc,iBAAiB,QAASF,EAAY,EACpDG,IAAW,iBAAiB,QAASpC,EAAkB,EACvDqC,IAAW,iBAAiB,QAASnC,EAAU,EAC/CoC,IAAY,iBAAiB,QAASlC,EAAW,EACjDmC,IAAS,iBAAiB,QAASjC,EAAY,EAG/C4B,IAAa,iBAAiB,QAASF,CAAc,EACrDG,IAAc,iBAAiB,QAASH,CAAc,EACtDI,IAAW,iBAAiB,QAASJ,CAAc,EACnDK,IAAW,iBAAiB,QAASL,CAAc,EACnDM,IAAY,iBAAiB,QAASN,CAAc,EACpDO,IAAS,iBAAiB,QAASP,CAAc,EAKjD,SAAS,eAAe,WAAW,GAAG,iBAAiB,UAAYQ,GAAU,CACvEA,EAAM,MAAQ,UAChBN,IAAa,MAAM,EACjB,SAAS,cAA8B,KAAK,EAElD,CAAC,EAED,SACG,eAAe,gBAAgB,GAC9B,iBAAiB,UAAYM,GAAU,CACnCA,EAAM,MAAQ,UAChBJ,IAAW,MAAM,EACf,SAAS,cAA8B,KAAK,EAElD,CAAC,EAEH,SAAS,eAAe,QAAQ,GAAG,iBAAiB,UAAYI,GAAU,CACpEA,EAAM,MAAQ,UAChBH,IAAW,MAAM,EACf,SAAS,cAA8B,KAAK,EAElD,CAAC,EAED,SAAS,eAAe,SAAS,GAAG,iBAAiB,UAAYG,GAAU,CACrEA,EAAM,MAAQ,UAChBF,IAAY,MAAM,EAChB,SAAS,cAA8B,KAAK,EAElD,CAAC,EAED,SAAS,eAAe,UAAU,GAAG,iBAAiB,UAAYE,GAAU,CACtEA,EAAM,MAAQ,UAChBD,IAAS,MAAM,EACb,SAAS,cAA8B,KAAK,EAElD,CAAC,EAGD,SAAS,iBAAiB,OAAO,EAAE,QAASE,GAAY,CACtDA,EAAQ,iBAAiB,QAAS,IAAM,CACtC,SAAS,gBAAgB,MAAM,YAAY,gBAAiB,MAAM,CACpE,CAAC,CACH,CAAC,EAGD,SAAS,iBAAiB,QAAQ,EAAE,QAASA,GAAY,CACvDA,EAAQ,iBAAiB,SAAU,IAAM,CACvC,SAAS,gBAAgB,MAAM,YAAY,gBAAiB,MAAM,CACpE,CAAC,CACH,CAAC,EAGD,SAAS,eAAe,cAAc,GAAG,iBAAiB,QAASZ,EAAW",
  "names": ["NORM_LEAP", "leapGregorian", "year", "GREGORIAN_EPOCH", "gregorianToJD", "month", "day", "jdToGregorian", "jd", "wjd", "dEpoch", "quadricent", "dqc", "mod", "cent", "dCent", "quad", "dQuad", "yIndex", "yearDay", "leapAdj", "leapJulian", "julianToJD", "jdToJulian", "td", "b", "c", "d", "e", "HEBREW_EPOCH", "hebrewLeap", "hebrewYearMonths", "hebrewDelay1", "months", "parts", "hebrewDelay2", "last", "present", "hebrewYearDays", "hebrewToJD", "hebrewMonthDays", "mon", "jdToHebrew", "i", "count", "first", "leapIslamic", "ISLAMIC_EPOCH", "ISLAMIC_WEEKDAYS", "islamicToJD", "jdToIslamic", "tehranEquinox", "equJED", "equinox", "equAPP", "deltaT", "equationOfTime", "dtTehran", "tehranEquinoxJD", "ep", "PERSIAN_EPOCH", "PERSIAN_WEEKDAYS", "persianAYear", "guess", "lastEq", "nextEq", "TropicalYear", "jdToPersianA", "adr", "yDay", "persianAToJD", "leapPersianA", "J2000", "JulianCentury", "JulianMillennium", "dtr", "rtd", "r", "fixAngle", "a", "fixAngR", "dSin", "dCos", "jWeekday", "j", "WEEKDAYS", "OTerms", "obliqueQ", "u", "v", "eps", "NutArgMult", "NutArgCoeff", "nutation", "t", "t2", "t3", "ta", "dp", "de", "to10", "ang", "deltaPsi", "deltaEpsilon", "DeltaTTab", "dt", "f", "EquinoxPTerms", "JDE0tab1000", "JDE0tab2000", "which", "JDE0tab", "Y", "JDE0", "T", "W", "deltaL", "S", "sunPos", "T2", "L0", "M", "C", "sunLong", "sunAnomaly", "sunR", "Omega", "Lambda", "epsilon0", "epsilon", "Alpha", "Delta", "AlphaApp", "DeltaApp", "tau", "alpha", "E", "julianDay", "gregYear", "gregMonth", "gregDay", "gregWeekday", "gregLeap", "julianYear", "julianMonth", "julianDate", "julianWeekday", "julianLeap", "hebMonth", "hebLeap", "hebYear", "hebDay", "islamicYear", "islamicMonth", "islamicDay", "islamicWeekday", "islamicLeap", "persYear", "persMonth", "persDay", "persWeekday", "persLeap", "updateFromGregorian", "year", "mon", "mDay", "j", "gregorianToJD", "weekday", "jWeekday", "WEEKDAYS", "NORM_LEAP", "leapGregorian", "julCal", "jdToJulian", "leapJulian", "hebCal", "jdToHebrew", "hebrewLeap", "hmIndex", "hebrewYearDays", "islCal", "jdToIslamic", "ISLAMIC_WEEKDAYS", "leapIslamic", "persCal", "jdToPersianA", "PERSIAN_WEEKDAYS", "leapPersianA", "calcGregorian", "calcJulian", "date", "jdToGregorian", "setJulian", "calcJulianCalendar", "julianToJD", "calcHebrew", "hebrewToJD", "calcIslamic", "islamicToJD", "calcPersianA", "persianAToJD", "setDateToToday", "today", "animalCalc", "persYearValue", "persMod", "animalAnswer", "animalEng", "animalOrig", "persianImperial", "imperialYear", "imperialAnswer", "ottomanFiscalCalc", "ottomanFiscalAnswer", "julianYearValue", "julianMonthIndex", "ottomanFiscalDay", "ottomanFiscalYear", "ottomanFiscalMonth", "seleucidCalc", "seleucidYear", "seleucidAnswer", "toggleNotes", "notesShowing", "button", "extrasCombined", "todayAndCalc", "gregCalcBtn", "gregTodayBtn", "julianBtn", "hebrewBtn", "islamicBtn", "persBtn", "event", "element"]
}
